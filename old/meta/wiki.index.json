{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "getting-started": {
        "ownKey": "getting-started",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "getting-started",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/getting-started"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-bom",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-bom"
          },
          "description": "",
          "title": "Getting Started",
          "content": "<h1 id=\"getting-started\"><a href=\"#getting-started\" id=\"getting-started\" class=\"anchor\"><\/a>Getting Started<\/h1>\n<h2 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h2>\n<ul>\n<li><a href=\"#installing\">Installing<\/a>\n<ul>\n<li><a href=\"#releases\">Releases<\/a><\/li>\n<li><a href=\"#snapshots\">Snapshots<\/a><\/li>\n<li><a href=\"#faker-bom\">Faker BOM<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#generating-data\">Generating Data<\/a><\/li>\n<\/ul>\n<h2 id=\"installing\"><a href=\"#installing\" id=\"installing\" class=\"anchor\"><\/a>Installing<\/h2>\n<h3 id=\"releases\"><a href=\"#releases\" id=\"releases\" class=\"anchor\"><\/a>Releases<\/h3>\n<p>Installation is as simple as adding <code>kotlin-faker<\/code> dependency to your build configuration file:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"ZrfJaDtgmU\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-groovy\"><\/span>\n          Gradle\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-maven\"><\/span>\n          Maven\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ZrfJaDtgmU\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">testImplementation(&quot;io.github.serpro69:kotlin-faker:$fakerVersion&quot;)\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-groovy\">testImplementation 'io.github.serpro69:kotlin-faker:$fakerVersion'\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.github.serpro69&lt;/groupId&gt;\n    &lt;artifactId&gt;kotlin-faker&lt;/artifactId&gt;\n    &lt;version&gt;${kotlin-faker.version}&lt;/version&gt;\n&lt;/dependency&gt;\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>Release artifacts are available for download from maven central, and you usually don't need to add any additional repositories information.<\/p>\n<h3 id=\"snapshots\"><a href=\"#snapshots\" id=\"snapshots\" class=\"anchor\"><\/a>Snapshots<\/h3>\n<p>Snapshot are automatically published on each commit to master. If you want to try out the latest functionality - add the dependency the same way as described above, but change the version to the current snapshot version, and add the sonatype snapshots repository to your repositories block in the build configuration file:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"eOf4LUqtTK\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-groovy\"><\/span>\n          Gradle\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-maven\"><\/span>\n          Maven\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"eOf4LUqtTK\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">repositories {\n    maven {\n        url = URI(&quot;https://oss.sonatype.org/content/repositories/snapshots/&quot;)\n    }\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-groovy\">repositories {\n    maven {\n        url = 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-xml\">&lt;repositories&gt;\n    &lt;repository&gt;\n        &lt;id&gt;sonatype-snapshot&lt;/id&gt;\n        &lt;name&gt;Sonatype Snapshot&lt;/name&gt;\n        &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;\n    &lt;/repository&gt;\n&lt;/repositories&gt;\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"faker-bom\"><a href=\"#faker-bom\" id=\"faker-bom\" class=\"anchor\"><\/a>Faker BOM<\/h3>\n<p>See <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-bom\">Kotlin-faker BOM<\/a> page for details on how to use a Bill-of-Materials to simplify dependency management.<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/getting-started#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"generating-data\"><a href=\"#generating-data\" id=\"generating-data\" class=\"anchor\"><\/a>Generating Data<\/h2>\n<p>Creating a <code>Faker<\/code> instance can be done either by creating a class instance directly:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"jsg83oMwmN\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"jsg83oMwmN\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\n\nfaker.name.firstName()\nfaker.address.city()\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">Faker faker = new Faker();\n\nfaker.getName().firstName()\nfaker.getAddress().city()\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>Or by using the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-dsl\">Faker DSL<\/a> (Which also gives you dsl-like access to <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration\">Faker Configuration<\/a>\n.)<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"pWWrjO80Y5\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        FunJava\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"pWWrjO80Y5\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = faker {\n    // faker config\n}\n\nfaker.name.firstName()\nfaker.address.city()\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">Faker faker = faker(fromConsumer(f -&gt; {\n    // faker config\n}));\n\nfaker.getName().firstName()\nfaker.getAddress().city()\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">Faker faker = faker(f -&gt; {\n    // faker config\n    return Unit.INSTANCE;\n});\n\nfaker.getName().firstName()\nfaker.getAddress().city()\n<\/code><\/pre><\/div>\n\n<\/div>\n<div class=\"box has-background-success\">\n  <div class=\"tip\">\n    <div class=\"tip-heading\">\n      <h5><span class=\"tip-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\">\n          <path fill-rule=\"evenodd\" d=\"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"><\/path>\n        <\/svg>\n      <\/span>tip<\/h5>\n    <\/div>\n    <div class=\"tip-content has-text-white-ter\">\n      <p><section class=\"accordions\">\n  <article class=\"accordion\">\n    <div class=\"accordion-header toggle\">\n      <p>For Java users (clickable)<\/p>\n    <\/div>\n    <div class=\"accordion-body\">\n      <div class=\"accordion-content\">\nNotice usage of <code>FunctionalUtil.fromConsumer<\/code> method in \"FunJava\" tab. If this is not used, then an explicit return must be specified at the end of the lambda (See \"Java\" tab instead).\nSee also <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/java-interop\">Java Interop<\/a> for more details on using kotlin-faker from Java.\n      <\/div>\n    <\/div>\n  <\/article>\n<\/section><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p><br><\/p>\n<p>This concludes this short &quot;getting started&quot; guide. Jump to <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration\">Faker Configuration<\/a> page to learn how to configure <code>Faker<\/code> to generate localized data, ensure deterministic random data generation and other configuration options or just click the next button to go to next wiki page.<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/getting-started#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "extensions": {
        "ownKey": "extensions",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "extensions",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/extensions"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-cli",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli"
          },
          "description": "",
          "title": "Extensions",
          "content": "<h1 id=\"extensions\"><a href=\"#extensions\" id=\"extensions\" class=\"anchor\"><\/a>Extensions<\/h1>\n<p><code>kotlin-faker<\/code> provides &quot;Faker extensions&quot; for popular third-party testing-related libraries and frameworks.<\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>The extension modules require the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/getting-started#installing\">main <code>kotlin-faker<\/code> dependency<\/a> to be on the classpath, unless otherwise specified in the given extension's documentation.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<h2 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h2>\n<ul>\n<li><a href=\"#blns\">BLNS<\/a><\/li>\n<li><a href=\"#kotest-property\">Kotest Property<\/a><\/li>\n<\/ul>\n<p><br><\/p>\n<h2 id=\"blns\"><a href=\"#blns\" id=\"blns\" class=\"anchor\"><\/a>BLNS<\/h2>\n<p>Kotlin-faker <code>blns<\/code> artifact provides convenience functions for returning strings from <a href=\"https://github.com/minimaxir/big-list-of-naughty-strings\">The Big List of Naughty Strings<\/a> - a list of strings which have a high probability of causing issues when used as user-input data, and can therefore be quite useful in testing.<\/p>\n<p>See the <a href=\"https://serpro69.github.io/kotlin-faker/old/extensions/blns-extension\">Big List of Naughty Strings Extension<\/a> page for usage details.<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extensions#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"kotest-property\"><a href=\"#kotest-property\" id=\"kotest-property\" class=\"anchor\"><\/a>Kotest Property<\/h2>\n<p><code>kotlin-faker-kotest-property<\/code> artifact extends <a href=\"https://kotest.io/docs/proptest/property-test-generators.html\"><code>Arb<\/code> generators<\/a> and provides an easy way to use kotlin-faker functionality with <a href=\"https://kotest.io/docs/proptest/property-based-testing.html\">kotest property testing<\/a>.<\/p>\n<p>See the <a href=\"https://serpro69.github.io/kotlin-faker/old/extensions/kotest-property-extension\">Kotest Property Extension<\/a> page for usage details.<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extensions#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "custom-data-provider": {
        "ownKey": "custom-data-provider",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "custom-data-provider",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/custom-data-provider"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "available-locales",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/available-locales"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "data-providers",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/data-providers"
          },
          "description": "",
          "title": "Custom Data Provider",
          "content": "<h1 id=\"custom-data-provider\"><a href=\"#custom-data-provider\" id=\"custom-data-provider\" class=\"anchor\"><\/a>Custom Data Provider<\/h1>\n<p>Kotlin-faker allows you to easily create your own custom fake data generators (providers), and even new fakers.<\/p>\n<p>Let's assume you want to create a <code>FooBar<\/code> data generator with support for the default <code>en<\/code> locale.<\/p>\n<p>First, we need to create a json file that will serve as your &quot;data dictionary&quot;, e.g. <code>resources/locales/en/foobar.json<\/code>, with the following contents:<\/p>\n<pre><code class=\"language-json\">{\n  &quot;en&quot;: {\n    &quot;faker&quot;: {\n      &quot;custom&quot;: {\n        &quot;foobar&quot;: {\n          &quot;foo&quot;: [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;],\n          &quot;bar&quot;: &quot;foobar&quot;,\n          &quot;baz&quot;: &quot;### ???&quot;\n        }\n      }\n    }\n  }\n}\n<\/code><\/pre>\n<ul>\n<li>The first key in the json file should match the locale name.<\/li>\n<li>The second key should always be <code>faker<\/code> and the third <code>custom<\/code><\/li>\n<li>The next key, <code>foobar<\/code> in this case, can be anything you want.\n<ul>\n<li>For <code>en<\/code> locale, the json filename should either match this key, or should be <code>custom.json<\/code>.<\/li>\n<li>If the filename is <code>foobar.json<\/code>, we need to override the <code>secondaryCategory<\/code> property in the data generator implementation (see ❷ below), and pass this property as second argument to <code>fakerService.load<\/code> (see ❸ below).<\/li>\n<\/ul>\n<\/li>\n<li>After that you have your data parameters with values as key-value pairs<\/li>\n<\/ul>\n<div class=\"box has-background-success\">\n  <div class=\"tip\">\n    <div class=\"tip-heading\">\n      <h5><span class=\"tip-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\">\n          <path fill-rule=\"evenodd\" d=\"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"><\/path>\n        <\/svg>\n      <\/span>tip<\/h5>\n    <\/div>\n    <div class=\"tip-content has-text-white-ter\">\n      <p>If you want to support a different locale, place the file in `resources/locales/<locale>/<category>.json` instead.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p>Then, we need to implement the <code>YamlFakeDataProvider<\/code> class:<\/p>\n<pre><code class=\"language-kotlin\">class FooBar(fakerService: FakerService) : YamlFakeDataProvider&lt;FooBar&gt;(fakerService) {\n    override val yamlCategory: YamlCategory = YamlCategory.CUSTOM // ❶\n    override val secondaryCategory: Category = Category.ofName(&quot;FOOBAR&quot;) // ❷\n    override val localUniqueDataProvider = LocalUniqueDataProvider&lt;FooBar&gt;()\n    override val unique: FooBar by UniqueProviderDelegate(localUniqueDataProvider, fakerService)\n\n    init {\n        fakerService.load(yamlCategory, secondaryCategory) // ❸\n    }\n\n    fun foo(): String = resolve(secondaryCategory, &quot;foo&quot;)\n    fun bar(): String = resolve(secondaryCategory, &quot;bar&quot;)\n    fun baz(): String = with(fakerService) { resolve(secondaryCategory, &quot;baz&quot;).numerify().letterify() } // ❹\n}\n<\/code><\/pre>\n<p>❶ The <code>yamlCategory<\/code> should generally use <code>YamlCategory.CUSTOM<\/code> enum class. Although you could also use one of the existing categories if you like, one should be careful not to override existing functionality in a given data provider.\n❷ If our json file is named <code>foobar.json<\/code>, the <code>secondaryKey<\/code> needs to override the category name\n❸ In this case we also need to pass the <code>secondaryCategory<\/code> argument to <code>fakerService.load<\/code> function\n❹ You have access to all default faker functionality, i.e. <code>FakerService#numerify<\/code> to replace all <code>#<\/code> placeholders with a random digit, and <code>FakerService#letterify<\/code> to replace all <code>?<\/code> with a random letter<\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>It's totally understandable if you're confused about the naming of the `YamlFakeDataProvider` and `YamlCategory` classes, especially since we use json files to read data from.\nThe reason for this is that the source of the data that faker uses comes in yml files, but faker converts them to json files at build time and uses those instead.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p>Last, we need to add a very simple implementation of the <code>AbstractFaker<\/code>:<\/p>\n<pre><code class=\"language-kotlin\">class CustomFaker(config: FakerConfig = fakerConfig { }) : AbstractFaker(config) {\n\n    val fooBar by lazy { FooBar(fakerService) }\n}\n<\/code><\/pre>\n<p>From there we can use our <code>CustomFaker<\/code> just like any other:<\/p>\n<pre><code class=\"language-kotlin\">val testFaker = CustomFaker()\nprintln(testFaker.fooBar.foo()) // baz\nprintln(testFaker.fooBar.bar()) // foobar\nprintln(testFaker.fooBar.baz()) // ABC 123\n<\/code><\/pre>\n"
        }]
      },
      "faker-bom": {
        "ownKey": "faker-bom",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-bom",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-bom"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-configuration",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "getting-started",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/getting-started"
          },
          "description": "",
          "title": "Kotlin-faker BOM",
          "content": "<h1 id=\"kotlin-faker-bom\"><a href=\"#kotlin-faker-bom\" id=\"kotlin-faker-bom\" class=\"anchor\"><\/a>Kotlin-faker BOM<\/h1>\n<p><a href=\"https://search.maven.org/artifact/io.github.serpro69/kotlin-faker-bom\"><img src=\"https://img.shields.io/maven-central/v/io.github.serpro69/kotlin-faker-bom?style=for-the-badge\" alt=\"Maven Central\" /><\/a>\n<a href=\"#downloading\"><img src=\"https://img.shields.io/nexus/s/io.github.serpro69/kotlin-faker-bom?label=snapshot-version&amp;server=https%3A%2F%2Foss.sonatype.org&amp;style=for-the-badge&amp;color=yellow\" alt=\"Sonatype Nexus (Snapshots)\" /><\/a><\/p>\n<p>Kotlin-faker provides a <a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#bill-of-materials-bom-poms\">Bill-of-Materials<\/a> that simplifies dependency management.<\/p>\n<h2 id=\"usage\"><a href=\"#usage\" id=\"usage\" class=\"anchor\"><\/a>Usage<\/h2>\n<h3 id=\"downloading\"><a href=\"#downloading\" id=\"downloading\" class=\"anchor\"><\/a>Downloading<\/h3>\n<p>Latest releases are always available on maven central.<\/p>\n<p><strong>With gradle<\/strong><\/p>\n<p>To <a href=\"https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import\">import Maven BOM with Gradle<\/a>, a platform dependency needs to be declared on the <code>kotlin-faker-bom<\/code>. The rest of <code>kotlin-faker<\/code> dependencies do not need to specify the versions explicitly as they will be pulled from the BOM<\/p>\n<pre><code class=\"language-groovy\">dependencies {\n    implementation platform('io.github.serpro69:kotlin-faker-bom:$version')\n    implementation 'io.github.serpro69:kotlin-faker'\n    implementation 'io.github.serpro69:kotlin-faker-books'\n    implementation 'io.github.serpro69:kotlin-faker-tech'\n    // rest of dependencies\n}\n<\/code><\/pre>\n<p><strong>With maven<\/strong><\/p>\n<p>To use the BOM, a dependency on <code>kotlin-faker-bom<\/code> needs to be declared in the <code>&lt;dependencyManagement&gt;<\/code> block of the <code>pom.xml<\/code>, file:<\/p>\n<pre><code class=\"language-xml\">&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.github.serpro69&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-faker-bom&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin-faker.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n<\/code><\/pre>\n<p>Then add the dependencies as usual but w/o specifying the versions, which will be pulled from the BOM:<\/p>\n<pre><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.serpro69&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-faker&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.serpro69&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-faker-books&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.github.serpro69&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-faker-tech&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- rest of dependencies as needed --&gt;\n&lt;/dependencies&gt;\n<\/code><\/pre>\n"
        }]
      },
      "available-locales": {
        "ownKey": "available-locales",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "available-locales",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/available-locales"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "java-interop",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/java-interop"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "custom-data-provider",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/custom-data-provider"
          },
          "description": "",
          "title": "Available Locales",
          "content": "<h1 id=\"available-locales\"><a href=\"#available-locales\" id=\"available-locales\" class=\"anchor\"><\/a>Available Locales<\/h1>\n<p>Below is the list of available locales that correspond to the yaml dictionary files found in <a href=\"https://github.com/serpro69/kotlin-faker/tree/master/core/src/main/resources/locales/\">core/locales/<\/a> (excluding the <code>en<\/code> sub-directory)<\/p>\n<div class=\"box has-background-warning\">\n  <div class=\"warn\">\n    <div class=\"warn-heading\">\n      <h5><span class=\"warn-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\"><\/path>\n        <\/svg>\n      <\/span>warn<\/h5>\n    <\/div>\n    <div class=\"warn-content\">\n      <p>Below pages contain code blocks with inlined yaml dictionaries, some of them can be quite big. This could affect your internet traffic if you're viewing these docs on a mobile device.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ar\"><code>ar<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/bg\"><code>bg<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ca-CAT\"><code>ca-CAT<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ca\"><code>ca<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/da-DK\"><code>da-DK<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/de-AT\"><code>de-AT<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/de-CH\"><code>de-CH<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/de\"><code>de<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ee\"><code>ee<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-AU\"><code>en-AU<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-BORK\"><code>en-BORK<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-CA\"><code>en-CA<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-GB\"><code>en-GB<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-IND\"><code>en-IND<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-MS\"><code>en-MS<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-NEP\"><code>en-NEP<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-NG\"><code>en-NG<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-NZ\"><code>en-NZ<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-PAK\"><code>en-PAK<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-SG\"><code>en-SG<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-TH\"><code>en-TH<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-UG\"><code>en-UG<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-US\"><code>en-US<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-ZA\"><code>en-ZA<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en-au-ocker\"><code>en-au-ocker<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/en\"><code>en<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/es-AR\"><code>es-AR<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/es-MX\"><code>es-MX<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/es\"><code>es<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/fa\"><code>fa<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/fi-FI\"><code>fi-FI<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/fr-CA\"><code>fr-CA<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/fr-CH\"><code>fr-CH<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/fr\"><code>fr<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/he\"><code>he<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/hy\"><code>hy<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/id\"><code>id<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/it\"><code>it<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ja\"><code>ja<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ko\"><code>ko<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/lt\"><code>lt<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/lv\"><code>lv<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/mi-NZ\"><code>mi-NZ<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/nb-NO\"><code>nb-NO<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/nl\"><code>nl<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/no\"><code>false<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/pl\"><code>pl<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/pt-BR\"><code>pt-BR<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/pt\"><code>pt<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/ru\"><code>ru<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/sk\"><code>sk<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/sv\"><code>sv<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/th\"><code>th<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/tr\"><code>tr<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/uk\"><code>uk<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/vi\"><code>vi<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/zh-CN\"><code>zh-CN<\/code><\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/locales/zh-TW\"><code>zh-TW<\/code><\/a><\/p>\n<\/li>\n<\/ul>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/available-locales#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "faker-cli": {
        "ownKey": "faker-cli",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-cli",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "extensions",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/extensions"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "java-interop",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/java-interop"
          },
          "description": "",
          "title": "Faker Bot CLI",
          "content": "<h1 id=\"faker-bot-cli\"><a href=\"#faker-bot-cli\" id=\"faker-bot-cli\" class=\"anchor\"><\/a>Faker Bot CLI<\/h1>\n<h2 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h2>\n<ul>\n<li><a href=\"#prerequisites\">Prerequisites<\/a><\/li>\n<li><a href=\"#installation\">Installation<\/a><\/li>\n<li><a href=\"#commands\">Commands<\/a>\n<ul>\n<li><a href=\"#list\"><code>list<\/code><\/a><\/li>\n<li><a href=\"#lookup\"><code>lookup<\/code><\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#options\">Options<\/a>\n<ul>\n<li><a href=\"#--verbose\"><code>--verbose<\/code><\/a><\/li>\n<li><a href=\"#--locale\"><code>--locale<\/code><\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p><br><\/p>\n<h2 id=\"prerequisites\"><a href=\"#prerequisites\" id=\"prerequisites\" class=\"anchor\"><\/a>Prerequisites<\/h2>\n<p><code>faker-bot<\/code> is released as a native linux image, and thus there are no additional pre-requisites for running the application.<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<p>The latest releases are available on github (link)<\/p>\n<p>== TODO ==<\/p>\n<p>[ ] add link<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"commands\"><a href=\"#commands\" id=\"commands\" class=\"anchor\"><\/a>Commands<\/h2>\n<h3 id=\"list\"><a href=\"#list\" id=\"list\" class=\"anchor\"><\/a><code>list<\/code><\/h3>\n<p>This command will print all existing functionality of kotlin-faker.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"uWC8hoIfSN\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-shell\"><\/span>\n          shell\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-text\"><\/span>\n          output\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"uWC8hoIfSN\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-shell\">faker-bot list\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-text\">Faker()\n├── address\n│   ├── buildingNumber()\n│   ├── city()\n│   ├── cityName()\n│   ├── cityWithState()\n│   ├── community()\n│   ├── country()\n│   ├── countryByCode()\n│   ├── countryByName()\n│   ├── countryCode()\n│   ├── countryCodeLong()\n│   ├── defaultCountry()\n│   ├── fullAddress()\n│   ├── mailbox()\n│   ├── postcode()\n│   ├── postcodeByState()\n│   ├── secondaryAddress()\n│   ├── state()\n│   ├── stateAbbr()\n│   ├── streetAddress()\n│   ├── streetName()\n│   └── timeZone()\n├── ancient\n│   ├── god()\n│   ├── hero()\n│   ├── primordial()\n│   └── titan()\n├── animal\n│   └── name()\n├── app\n│   ├── author()\n│   ├── name()\n│   └── version()\n├── appliance\n│   ├── brand()\n│   └── equipment()\n├── aquaTeenHungerForce\n│   ├── character()\n│   └── quote()\n├── artist\n│   └── names()\n├── backToTheFuture\n│   ├── characters()\n│   ├── dates()\n│   └── quotes()\n├── bank\n│   ├── ibanDetails()\n│   ├── name()\n│   └── swiftBic()\n├── barcode\n│   ├── compositeSymbol()\n│   ├── ean13()\n│   ├── ean8()\n│   ├── isbn()\n│   ├── ismn()\n│   ├── issn()\n│   ├── upcA()\n│   └── upcE()\n├── ...\n│   ├── ...\n│   └── ...\n└── ...\n    └── ...\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<h3 id=\"lookup\"><a href=\"#lookup\" id=\"lookup\" class=\"anchor\"><\/a><code>lookup<\/code><\/h3>\n<p>Often a <code>lookup<\/code> command will be more suitable to quickly find a necessary function.<\/p>\n<p>This command will print all the functions that match the specified string argument (case-insensitive)<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"lGYPfA5Vqd\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-shell\"><\/span>\n          shell\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-text\"><\/span>\n          output\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"lGYPfA5Vqd\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-shell\">faker-bot lookup QuoTe\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-text\">Faker()\n├── aquaTeenHungerForce\n│   └── quote()\n├── backToTheFuture\n│   └── quotes()\n├── bigBangTheory\n│   └── quotes()\n├── bojackHorseman\n│   └── quotes()\n├── buffy\n│   └── quotes()\n├── community\n│   └── quotes()\n├── control\n│   └── quote()\n├── departed\n│   └── quotes()\n├── drWho\n│   └── quotes()\n├── dumbAndDumber\n│   └── quotes()\n├── dune\n│   └── quotes()\n├── fallout\n│   └── quotes()\n├── familyGuy\n│   └── quote()\n├── freshPriceOfBelAir\n│   └── quotes()\n├── friends\n│   └── quotes()\n├── futurama\n│   └── quotes()\n├── gameOfThrones\n│   └── quotes()\n├── ghostBusters\n│   └── quotes()\n├── greekPhilosophers\n│   └── quotes()\n├── harryPotter\n│   └── quotes()\n├── heroesOfTheStorm\n│   └── quotes()\n├── heyArnold\n│   └── quotes()\n├── hitchhikersGuideToTheGalaxy\n│   ├── marvinQuote()\n│   └── quotes()\n├── hobbit\n│   └── quote()\n├── howIMetYourMother\n│   └── quote()\n├── leagueOfLegends\n│   └── quote()\n├── lebowski\n│   └── quotes()\n├── lordOfTheRings\n│   └── quotes()\n├── michaelScott\n│   └── quotes()\n├── movie\n│   └── quote()\n├── myst\n│   └── quotes()\n├── newGirl\n│   └── quotes()\n├── onePiece\n│   └── quotes()\n├── overwatch\n│   └── quotes()\n├── princessBride\n│   └── quotes()\n├── rickAndMorty\n│   └── quotes()\n├── rupaul\n│   └── quotes()\n├── seinfeld\n│   └── quote()\n├── siliconValley\n│   └── quotes()\n├── simpsons\n│   └── quotes()\n├── southPark\n│   └── quotes()\n├── starWars\n│   ├── quote()\n│   └── quotes()\n├── stargate\n│   └── quotes()\n├── strangerThings\n│   └── quote()\n├── streetFighter\n│   └── quotes()\n├── suits\n│   └── quotes()\n├── theExpanse\n│   └── quotes()\n├── theITCrowd\n│   └── quotes()\n├── twinPeaks\n│   └── quotes()\n├── vForVendetta\n│   └── quotes()\n├── ventureBros\n│   └── quote()\n├── warhammerFantasy\n│   └── quotes()\n├── witcher\n│   └── quotes()\n├── worldOfWarcraft\n│   └── quotes()\n└── yoda\n    └── quotes()\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"options\"><a href=\"#options\" id=\"options\" class=\"anchor\"><\/a>Options<\/h2>\n<h3 id=\"--verbose\"><a href=\"#--verbose\" id=\"--verbose\" class=\"anchor\"><\/a><code>--verbose<\/code><\/h3>\n<p>Each of the commands accepts a <code>--verbose<\/code> option that will also print a randomly generated value.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"eZlu0JOzod\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-shell\"><\/span>\n          shell\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-text\"><\/span>\n          output\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"eZlu0JOzod\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-shell\">faker-bot lookup ea --verbose\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-text\">Faker()\n├── address\n│   └── stateAbbr() // =&gt; SD\n├── barcode\n│   ├── ean13() // =&gt; 609208203729\n│   └── ean8() // =&gt; 7145993\n├── basketball\n│   └── teams() // =&gt; Dallas Mavericks\n├── beer\n│   └── yeast() // =&gt; 5335 - Lactobacillus\n├── cannabis\n│   └── healthBenefits() // =&gt; stimulates function in the immune system\n├── dnd\n│   ├── meleeWeapons() // =&gt; Greatclub\n│   └── rangedWeapons() // =&gt; Crossbow\n├── dota\n│   └── team() // =&gt; Invictus Gaming\n├── eSport\n│   ├── leagues() // =&gt; MLG\n│   └── teams() // =&gt; iBUYPOWER\n├── elderScrolls\n│   └── creature() // =&gt; Skeleton\n├── food\n│   ├── measurementSizes() // =&gt; 1/4\n│   ├── measurements() // =&gt; pint\n│   └── metricMeasurements() // =&gt; deciliter\n├── football\n│   └── teams() // =&gt; Atletico Madrid\n├── markdown\n│   └── headers() // =&gt; ###\n├── myst\n│   └── creatures() // =&gt; karnaks\n├── onePiece\n│   └── seas() // =&gt; South Blue\n├── programmingLanguage\n│   └── creator() // =&gt; James Gosling\n├── space\n│   └── distanceMeasurement() // =&gt; AU\n├── swordArtOnline\n│   └── realName() // =&gt; Viksul Ur Shasta\n├── warhammerFantasy\n│   └── creatures() // =&gt; Hippogriff\n└── worldCup\n    └── teams() // =&gt; Morocco\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<h3 id=\"--locale\"><a href=\"#--locale\" id=\"--locale\" class=\"anchor\"><\/a><code>--locale<\/code><\/h3>\n<p>Combining <code>--locale<\/code> option with <code>--verbose<\/code> will output translated values using the selected locale.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"PntzPQfRfI\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-shell\"><\/span>\n          shell\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-text\"><\/span>\n          output\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"PntzPQfRfI\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-shell\">lookup names --verbose --locale uk\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-text\">Faker()\n├── artist\n│   └── names() // =&gt; Сандро Ботічеллі\n├── greekPhilosophers\n│   └── names() // =&gt; Pythagoras\n├── heroes\n│   └── names() // =&gt; Tazar\n├── heroesOfTheStorm\n│   └── classNames() // =&gt; Support\n└── pokemon\n    └── names() // =&gt; Onix\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>Notice how some values are not translated because of a partially-localized <a href=\"https://serpro69.github.io/kotlin-faker/old/locales/uk\">uk<\/a> dictionary.\n<br>\nSee also <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration#locale\">Faker Configuration - Locale<\/a> for more information about generating values in another language.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "unique-generator": {
        "ownKey": "unique-generator",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "unique-generator",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "extras",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/extras"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-configuration",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration"
          },
          "description": "",
          "title": "Generator of Unique Values",
          "content": "<h1 id=\"generator-of-unique-values\"><a href=\"#generator-of-unique-values\" id=\"generator-of-unique-values\" class=\"anchor\"><\/a>Generator of Unique Values<\/h1>\n<p><strong>kotlin-faker<\/strong> supports generation of unique (non-repeatable) values and there are two ways to use this: <em>&quot;globally&quot;<\/em> - per data-provider, and <em>&quot;locally&quot;<\/em> - per function.<\/p>\n<h2 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h2>\n<ul>\n<li><a href=\"#unique-values-for-entire-data-provider\">Unique Values for Entire Data Provider<\/a>\n<ul>\n<li><a href=\"#clearing-records-of-generated-values\">Clearing Records of Generated Values<\/a><\/li>\n<li><a href=\"#disabling-unique-values-generator\">Disabling Unique Values Generator<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#unique-values-for-a-single-function\">Unique Values for a Single Function<\/a><\/li>\n<li><a href=\"#configuring-retry-limit\">Configuring Retry Limit<\/a><\/li>\n<li><a href=\"#excluding-values-from-generation\">Excluding Values from Generation<\/a><\/li>\n<\/ul>\n<h2 id=\"unique-values-for-entire-data-provider\"><a href=\"#unique-values-for-entire-data-provider\" id=\"unique-values-for-entire-data-provider\" class=\"anchor\"><\/a>Unique Values for Entire Data Provider<\/h2>\n<p>❶ Use the <code>faker.unique.configuration<\/code> function to configure unique generation of values &quot;globally&quot;.<\/p>\n<p>❷ Enable generation of unique values for <code>Address<\/code> data provider<\/p>\n<p>❸ Each invocation of <code>faker.address.&lt;someFun&gt;()<\/code> will generate a unique value.<\/p>\n<p>❹ Repeated invocations will produce unique values until all the values are exhausted and a <code>uniqueGeneratorRetryLimit<\/code> is reached.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"1cDay9QUKp\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"1cDay9QUKp\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\nfaker.unique.configuration { // ❶\n    enable(faker::address) // ❷\n}\nval countries = List(60) { faker.address.country() } // ❸\nval cities = List(30) { faker.address.city() }\nval otherCities = List(30) { faker.address.city() } // ❹\n\nassertEquals(countries.distinct().size, 60)\nassertEquals(cities.distinct().size, 30)\nassertEquals(otherCities.distinct().size, 30)\nassertFalse(cities.any { otherCities.contains(it) }) // ❹\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<div class=\"box has-background-warning\">\n  <div class=\"warn\">\n    <div class=\"warn-heading\">\n      <h5><span class=\"warn-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\"><\/path>\n        <\/svg>\n      <\/span>warn<\/h5>\n    <\/div>\n    <div class=\"warn-content\">\n      <p>Unique values can be exhausted and <code>Faker<\/code> will throw a <code>RetryLimitException<\/code> if the <code>uniqueGeneratorRetryLimit<\/code> is reached.\n<br>\nSee also <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration\">Faker Configuration<\/a> page to learn how to configure <code>Faker<\/code>, as well as the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#configuring-retry-limit\">Configuring Retry Limit<\/a> section of this page for information on retry limits for unique generators.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<h3 id=\"clearing-records-of-generated-values\"><a href=\"#clearing-records-of-generated-values\" id=\"clearing-records-of-generated-values\" class=\"anchor\"><\/a>Clearing Records of Generated Values<\/h3>\n<p>It is possible to clear (reset) the record of already generated values, so that they can be generated again, and thus minimize the chances of reaching the retry limit of generating unique values.<\/p>\n<p>❶ Use the <code>faker.unique.clear(faker::&lt;provider&gt;)<\/code> function to clear the record of generated values for the particular <code>&lt;provider&gt;<\/code>, thus increasing the overall pool of possible values.<\/p>\n<p>❷ Invocations of <code>faker.&lt;provider&gt;.&lt;someFun&gt;()<\/code> can now generate values that were already generated before.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"zwnsWN8MlH\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"zwnsWN8MlH\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\nfaker.unique.configuration {\n    enable(faker::address)\n}\n\nval countries = List(60) { faker.address.country() }\nfaker.unique.clear(faker::address) // ❶\nval otherCountries = List(60) { faker.address.country() } // ❷\n\nassertTrue(countries.any { otherCountries.contains(it) })\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr />\n<p>It is also possible to clear all records of generated values:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"Yg0m8HY94t\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"Yg0m8HY94t\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\nfaker.unique.configuration {\n    enable(faker::address)\n    enable(faker::name)\n}\n// generate some values with 'address', 'name', and 'internet' providers\n\n// clears records of generated values for 'address', 'name', and 'internet' providers\nfaker.unique.clearAll()\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<h3 id=\"disabling-unique-values-generator\"><a href=\"#disabling-unique-values-generator\" id=\"disabling-unique-values-generator\" class=\"anchor\"><\/a>Disabling Unique Values Generator<\/h3>\n<p>One may want to disable generating unique values altogether. Just like clearing records of generated unique values, disabling unique generation can also be done on a provider-level:<\/p>\n<p>❶ Unique generation is enabled for <code>Address<\/code>, <code>Name<\/code>, and <code>Internet<\/code>.<\/p>\n<p>❷ Unique generation is then disabled for <code>Address<\/code>.<\/p>\n<p>❸ <code>Address<\/code> does not generate unique values anymore.<\/p>\n<p>❹ <code>Name<\/code> and <code>Internet<\/code> still generate unique values.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"HwcpPI1ioU\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"HwcpPI1ioU\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\nfaker.unique.configuration { // ❶\n    enable(faker::address)\n    enable(faker::name)\n}\n\nval countries = List(100) { faker.address.country() }\nval names = List(100) { faker.name.firstName() }\n\nfaker.unique.configuration { disable(faker::address) } // ❷\n\nval otherCountries = List(100) { faker.address.country() }\nval otherNames = List(100) { faker.name.firstName() }\n\nassertTrue(countries.any { otherCountries.contains(it) }) // ❸\nassertFalse(names.any { otherNames.contains(it) }) // ❹\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>As well as for all providers:<\/p>\n<p>❶ Unique generation is disabled for <code>Address<\/code>, <code>Name<\/code>, <code>Internet<\/code>, and all other providers that may have been enabled.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"lc456N3XEQ\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"lc456N3XEQ\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\nfaker.unique.configuration {\n    enable(faker::address)\n    enable(faker::name)\n}\n\nfaker.unique.configuration { disableAll() } // ❶\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>Disabling generation of unique values will effectively clear the record(s) of already generated values.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"unique-values-for-a-single-function\"><a href=\"#unique-values-for-a-single-function\" id=\"unique-values-for-a-single-function\" class=\"anchor\"><\/a>Unique Values for a Single Function<\/h2>\n<p>Unique values can also be generated for a single function, instead of an entire data provider. To do so, prepend the function invocation with <code>unique<\/code> generator property:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"5i87Rpleue\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"5i87Rpleue\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<pre><code class=\"language-kotlin\">val faker = Faker()\n\nrepeat(10) { faker.address.unique.country() } // will generate unique country each time `country()` is prefixed with `unique`\n\nrepeat(10) { faker.address.city() } // this will not necessarily be unique (unless `faker.unique.enable(faker::address)` was called previously)\n<\/code><\/pre>\n<hr />\n<p>To clear the record of unique values that were already generated use the <code>clear(&quot;functionName&quot;)<\/code> with the &quot;local&quot; unique generator:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"yatXRMGojW\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"yatXRMGojW\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<pre><code class=\"language-kotlin\">faker.address.unique.clear(&quot;city&quot;) // clears used values for `faker.address.unique.city()` function\n\nfaker.address.unique.clearAll() // clears used values for all functions of address provider\n<\/code><\/pre>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>There is no <code>disable<\/code> function available for local unique generators - they are completely independent of the standard APIs:\n\n<div class=\"tabs\">\n  <ul data-tabs=\"dJDnuv4yTU\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"dJDnuv4yTU\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">// generates unique city each time it's called\nfaker.address.unique.city()\n\n// generates non-unique city (unless global unique generator for 'address' is enabled)\nfaker.address.city()\n<\/code><\/pre><\/div>\n\n<\/div><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"configuring-retry-limit\"><a href=\"#configuring-retry-limit\" id=\"configuring-retry-limit\" class=\"anchor\"><\/a>Configuring retry limit<\/h2>\n<p>If the retry count of unique generator exceeds the configured value (defaults to <code>100<\/code>) then a <code>RetryLimitException<\/code> will be thrown.<\/p>\n<p>It is possible to re-configure the default value through <code>FakerConfig<\/code>:<\/p>\n<pre><code class=\"language-kotlin\">val config = fakerConfig {\n    uniqueGeneratorRetryLimit = 1000\n}\n\nval faker = Faker(config)\n<\/code><\/pre>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>Even if <code>uniqueGeneratorRetryLimit<\/code> is set to a very high number, one still needs to keep in mind the dataset size for a given faker function to avoid unexpected exceptions when generating unique values.\n<br>\nFor example, a <code>city_prefix<\/code> param in the <code>address<\/code> category only has 7 values:\n\n<section class=\"accordions\">\n  <article class=\"accordion\">\n    <div class=\"accordion-header toggle\">\n      <p>address.yml<\/p>\n    <\/div>\n    <div class=\"accordion-body\">\n      <div class=\"accordion-content\">\n<pre><code class=\"language-yaml\">en:\n  faker:\n    address:\n      city_prefix: [North, East, West, South, New, Lake, Port]\n# rest of the address.yml dict file\n<\/code><\/pre>\n\n      <\/div>\n    <\/div>\n  <\/article>\n<\/section>\n\nTherefore, the initial pool size of unique values is quite small and will be exhausted very quickly, so the retry limit might need to be set to a higher than default value.\n<br>\nAnd obviously if one tries to generate 8 unique city prefixes a <code>RetryLimitException<\/code> will be thrown sooner or later, irrespective of what value is set for the <code>uniqueGeneratorRetryLimit<\/code> config property.\n<br>\n<br>\nA reference list of available Data Providers with their corresponding yml dictionary data can be found on the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/data-providers\">Data Providers<\/a> wiki page.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>It is also worth mentioning that \"global\" and \"local\" unique data generators are independent of each other, each keeping its own records of generated values that might need to be cleared eventually.\n<br>\nAt the same time, the <code>uniqueGeneratorRetryLimit<\/code> config property applies to both equally.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"excluding-values-from-generation\"><a href=\"#excluding-values-from-generation\" id=\"excluding-values-from-generation\" class=\"anchor\"><\/a>Excluding Values from Generation<\/h2>\n<p>Certain values can be excluded from being generated with unique generator. This is configured on the <code>faker<\/code> (&quot;global&quot;) level for each (or in some cases - all) of the providers.<\/p>\n<pre><code class=\"language-kotlin\">val faker = Faker()\n\nfaker.unique.configuration {\n    // Enable generation of unique values for Address provider\n    // Any unique generation configuration will only affect &quot;enabled&quot; providers\n    enable(faker::address)\n\n    // Exclude listOfValues from being generated \n    // in all providers that are enabled for unique generation\n    exclude(listOfValues)\n\n    // Exclude values starting with &quot;A&quot; from being generated \n    // in all providers that are enabled for unique generation\n    exclude { listOf(Regex(&quot;^A&quot;)) }\n\n    // Additional configuration for particular provider\n    // First enable generation of unique values for Name provider\n    enable(faker::name) {\n        // Exclude listOfNames from being generated by any Name provider function\n        excludeFromProvider&lt;Name&gt;(listOfNames)\n\n        // Exclude listOfLastNames from being generated by Name#lastName function\n        excludeFromFunction(Name::lastName, listOfLastNames)\n\n        // Exclude values starting with &quot;B&quot; from being generated by any Name provider function\n        excludeFromProvider&lt;Name&gt; { listOf(Regex(&quot;^B&quot;)) }\n\n        // Exclude values starting with &quot;C&quot; from being generated by Name#country function\n        excludeFromFunction(Name::lastName) { listOf(Regex(&quot;^C&quot;)) }\n    }\n}\n\n// Based on the above config the following will be true in addition to generating unique values:\nval city = faker.address.city()\nassertTrue(listOfValues.contains(city) == false)\nassertTrue(city.startsWith(&quot;A&quot;) == false)\n\nval firstName = faker.name.firstName()\nval lastName = faker.name.lastName()\nassertTrue(listOfValues.contains(firstName) == false)\nassertTrue(listOfValues.contains(lastName) == false)\nassertTrue(listOfNames.contains(firstName) == false)\nassertTrue(listOfNames.contains(lastName) == false)\nassertTrue(listOfLastNames.contains(lastName) == false)\nassertTrue(firstName.startsWith(&quot;A&quot;) == false)\nassertTrue(lastName.startsWith(&quot;A&quot;) == false)\nassertTrue(firstName.startsWith(&quot;B&quot;) == false)\nassertTrue(lastName.startsWith(&quot;B&quot;) == false)\nassertTrue(lastName.startsWith(&quot;C&quot;) == false)\n<\/code><\/pre>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>This is only applicable when the whole category, i.e. <code>Address<\/code> or <code>Name<\/code>, is enabled for unique generation of values. Local generators will still generate unique values of their own, but won't take into consideration exclusion rules, if any are set:\n\n<div class=\"tabs\">\n  <ul data-tabs=\"Y5wkyMLKx9\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"Y5wkyMLKx9\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\n\nfaker.unique.configuration {\n    enable(faker::address)\n    exclude(listOfCountries)\n}\n\n// generates unique countries, but will never generate any of the values from the 'listOfCountries'\nfaker.address.country()\n\n// will still generate its own unique countries, but won't consider the exclusions that are set above\nfaker.address.unique.country()\n<\/code><\/pre><\/div>\n\n<\/div><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "extras": {
        "ownKey": "extras",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "extras",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/extras"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-dsl",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-dsl"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "unique-generator",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator"
          },
          "description": "",
          "title": "Extras",
          "content": "<h1 id=\"extras\"><a href=\"#extras\" id=\"extras\" class=\"anchor\"><\/a>Extras<\/h1>\n<p><code>kotlin-faker<\/code> provides additional functionality outside of data generation from static .yml dictionaries.<\/p>\n<h2 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h2>\n<ul>\n<li><a href=\"#random-instance-of-any-class\">Random instance of any class<\/a>\n<ul>\n<li><a href=\"#random-class-instance-configuration\">Random Class Instance Configuration<\/a><\/li>\n<li><a href=\"#pre-configuring-type-generation\">Pre-configuring type generation<\/a>\n<ul>\n<li><a href=\"#predefined-types-for-constructor-parameters\">Predefined types for constructor parameters<\/a><\/li>\n<li><a href=\"#pre-defined-instance-for-classes-with-no-public-or-internal-constructors\">Pre-defined instance for classes with no public constructors<\/a><\/li>\n<li><a href=\"#predefined-collection-element-types\">Predefined collection element types<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#deterministic-constructor-selection\">Deterministic constructor selection<\/a><\/li>\n<li><a href=\"#default-values-selection\">Default constructor values selection<\/a><\/li>\n<li><a href=\"#configuring-the-size-of-generated-collections\">Configuring the size of generated Collections<\/a><\/li>\n<li><a href=\"#making-a-new-instance-of-random-class-provider\">Making a Copy or a New instance of RandomClassProvider<\/a>\n<ul>\n<li><a href=\"#new-instance\">New Instance<\/a><\/li>\n<li><a href=\"#instance-copy\">Instance Copy<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#dealing-with-generic-types\">Dealing with Generic Types<\/a><\/li>\n<li><a href=\"#top-level-functions\">Top-level functions<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"#random-everything\">Random Everything<\/a><\/li>\n<li><a href=\"#random-strings-from-templates\">Random Strings from Templates<\/a><\/li>\n<\/ul>\n<p><br><\/p>\n<h2 id=\"random-instance-of-any-class\"><a href=\"#random-instance-of-any-class\" id=\"random-instance-of-any-class\" class=\"anchor\"><\/a>Random instance of any class<\/h2>\n<p>It is possible to create a random instance of (almost) any class.<\/p>\n<p>There are some rules to keep in mind:<\/p>\n<ul>\n<li>A class must have a public or internal constructor<\/li>\n<li>By default, a constructor with the least number of arguments is used (This can be configured - read on.)<\/li>\n<li><code>kolin.Array<\/code> type in the constructor is not supported at the moment<\/li>\n<li>Inner classes (either direct generation or as class parameter type) are not supported at the moment<\/li>\n<\/ul>\n<p>Random instance generation is available through <code>Faker().randomProvider<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"60ZCpVc9pG\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"60ZCpVc9pG\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo(val a: String)\nclass Bar(val foo: Foo)\n\nval foo: Foo = faker.randomClass.randomClassInstance()\nval bar: Bar = faker.randomClass.randomClassInstance()\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"random-class-instance-configuration\"><a href=\"#random-class-instance-configuration\" id=\"random-class-instance-configuration\" class=\"anchor\"><\/a>Random Class Instance Configuration<\/h3>\n<p>Random Class Instance configuration can be applied on several levels. Consider the following classes:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"KNgw1T6u6c\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"KNgw1T6u6c\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo\ndata class Bar(val int: Int, val uuid: UUID)\ndata class Baz(val foo: Foo, val bar: Bar, val string: String)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<h4 id=\"configuration-via-fakerconfig\"><a href=\"#configuration-via-fakerconfig\" id=\"configuration-via-fakerconfig\" class=\"anchor\"><\/a>Configuration via <code>FakerConfig<\/code><\/h4>\n<p>This takes the least precedence and applies to all instances (see <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#making-a-new-instance-of-random-class-provider\">Making a copy/new instance of RandomClassProvider<\/a>) of <code>RandomClassProvider<\/code> if set.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"VCPn8XFZsl\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"VCPn8XFZsl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val cfg = fakerConfig {\n    randomClassInstance {\n        typeGenerator&lt;Bar&gt; { Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)) }\n    }\n}\nval f = Faker(cfg)\nval baz: Baz = f.randomClass.randomClassInstance&lt;Baz&gt;()\nassertEquals(baz.bar, Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)))\nval anotherBaz = f.randomClass.new().randomClassInstance&lt;Baz&gt;()\nassertEquals(anotherBaz.bar, Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)))\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<h4 id=\"configuration-via-fakerrandomprovider\"><a href=\"#configuration-via-fakerrandomprovider\" id=\"configuration-via-fakerrandomprovider\" class=\"anchor\"><\/a>Configuration via <code>Faker#randomProvider<\/code><\/h4>\n<p>This takes higher precedence and will also merge any configuration that was set on the previous level.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"oBumJosuXX\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"oBumJosuXX\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val cfg = fakerConfig {\n    randomClassInstance {\n        typeGenerator&lt;Bar&gt; { Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)) }\n    }\n}\nval f = Faker(cfg).also {\n    it.randomClass.configure {\n        typeGenerator&lt;UUID&gt; { UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;) }\n    }\n}\n\nval bar: Bar = f.randomClass.randomClassInstance()\nval baz: Baz = f.randomClass.randomClassInstance()\nassertEquals(bar.uuid, UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;))\nassertEquals(baz.bar, Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)))\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<h4 id=\"configuration-via-randomclassinstance-function\"><a href=\"#configuration-via-randomclassinstance-function\" id=\"configuration-via-randomclassinstance-function\" class=\"anchor\"><\/a>Configuration via <code>randomClassInstance<\/code> function<\/h4>\n<p>This configuration takes the most precedence and does not take into account configurations applied on other levels.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"Jw8wzyZEgC\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"Jw8wzyZEgC\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.randomClass.configure {\n    typeGenerator&lt;Bar&gt; { Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)) }\n}\nval baz: Baz = faker.randomClass.randomClassInstance {\n    typeGenerator&lt;Bar&gt; { Bar(1, UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;)) }\n}\nassertEquals(baz.bar, Bar(1, UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;)))\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"pre-configuring-type-generation\"><a href=\"#pre-configuring-type-generation\" id=\"pre-configuring-type-generation\" class=\"anchor\"><\/a>Pre-Configuring type generation<\/h3>\n<h4 id=\"predefined-types-for-constructor-parameters\"><a href=\"#predefined-types-for-constructor-parameters\" id=\"predefined-types-for-constructor-parameters\" class=\"anchor\"><\/a>Predefined types for constructor parameters<\/h4>\n<p>Some, or all, of the constructor params can be instantiated with values following some pre-configured logic using <code>typeGenerator<\/code> or <code>namedParameterGenerator<\/code> functions. Consider the following example:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"cNfmgc0jGK\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"cNfmgc0jGK\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Baz(val id: Int, val uuid: UUID, val relatedUuid: UUID, val user: String)\n\nval baz: Baz = faker.randomClass.randomClassInstance {\n    typeGenerator&lt;UUID&gt; { UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;) }\n    typeGenerator&lt;Int&gt; { 0 }\n    typeGenerator&lt;String&gt; { parameterInfo -&gt; &quot;${parameterInfo.name}_${randomString()}&quot; }\n    namedParameterGenerator(&quot;relatedUuid&quot;) { UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;) }\n}\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br>\nSo for each instance of <code>Baz<\/code> the following will be true:<\/p>\n<pre><code class=\"language-kotlin\">baz.id == 0\nbaz.user == &quot;user_X3a8s813dcb&quot;\nbaz.uuid == UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;)\nbaz.relatedUuid == UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)\n<\/code><\/pre>\n<p>This example itself does not make that much sense, since we're using &quot;static&quot; values, but we could also do something like:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"b1H8Hq8CRn\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"b1H8Hq8CRn\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val baz: Baz = faker.randomProvider.randomClassInstance {\n    typeGenerator&lt;UUID&gt; { UUID.randomUUID() }\n}\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br>\n...or even so:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"VaCtUZcVyU\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"VaCtUZcVyU\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Person(val id: Int, val name: String)\n\nval person: Person = faker.randomProvider.randomClassInstance {\n    typeGenerator&lt;String&gt; { faker.name.name() }\n}\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<h4 id=\"pre-defined-instance-for-classes-with-no-public-or-internal-constructors\"><a href=\"#pre-defined-instance-for-classes-with-no-public-or-internal-constructors\" id=\"pre-defined-instance-for-classes-with-no-public-or-internal-constructors\" class=\"anchor\"><\/a>Pre-defined instance for classes with no public or internal constructors<\/h4>\n<p>By default, <code>randomClassInstance<\/code> can't generate classes with no public constructors, but this can be worked around by using <code>typeGenerator<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"65v9E6md64\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"65v9E6md64\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.randomProvider.randomClassInstance&lt;Instant&gt; {\n    typeGenerator&lt;Instant&gt; { Instant.now() }\n}\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>You could also use the same approach to create interfaces, for example:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"ZYMnM5kGys\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ZYMnM5kGys\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">interface TestInterface {\n  val id: Int\n  val name: String\n}\n\nval testInterface = randomProvider.randomClassInstance&lt;TestInterface&gt; {\n  typeGenerator&lt;TestInterface&gt; {\n    object : TestInterface {\n      override val id: Int = 42\n      override val name: String = &quot;Deep Thought&quot;\n    }\n  }\n}\n\ntestInterface.id shouldBe 42\ntestInterface.name shouldBe &quot;Deep Thought&quot;\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>A random class instance will be generated using the following precedence rules:<\/p>\n<ul>\n<li>object instance<\/li>\n<li>&quot;default instance&quot; of a class\n<ul>\n<li>uses a public/internal constructor with the least number of arguments, unless otherwise configured (see <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#random-class-instance-configuration\">Random Class Instance Configuration<\/a>)<\/li>\n<\/ul>\n<\/li>\n<li>&quot;predefined instance&quot; of a class if no public or internal constructors are found<\/li>\n<li>failing all of the above, <code>NoSuchElementException<\/code> will be thrown<\/li>\n<\/ul>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h4 id=\"predefined-collection-element-types\"><a href=\"#predefined-collection-element-types\" id=\"predefined-collection-element-types\" class=\"anchor\"><\/a>Predefined collection element types<\/h4>\n<p>It may be desirable to define how elements of a <code>Collection<\/code> (currently supports <code>List<\/code>s and <code>Set<\/code>s) constructor parameter type are generated, for this <code>collectionElementTypeGenerator<\/code> function can be used:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"mS9XXygoOl\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"mS9XXygoOl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">fun randomListString() = &quot;list&quot;\nfun randomString() = &quot;string&quot;\n\nclass Baz(val list: List&lt;String&gt;, val set: Set&lt;String&gt;)\n\nval baz: Baz = faker.randomClass.randomClassInstance {\n    collectionElementTypeGenerator&lt;String&gt; {\n        // customize generators for different collection types\n        if ((it.type.classifier as KClass&lt;*&gt;) == List::class) {\n            // generate random string elements for parameters of List&lt;String&gt; type\n            randomListString()\n        } else {\n            // generate random string elements for parameters of Set type\n            randomString()\n        }\n    }\n}\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>So for each instance of <code>Baz<\/code> the following will be true:<\/p>\n<pre><code class=\"language-kotlin\">baz.list.all { it == &quot;list&quot; }\nbaz.set.all {it == &quot;string&quot; }\n<\/code><\/pre>\n<p>This example kind of makes little sense, since we're using &quot;static&quot; values, so it's just for example purposes.<\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>Note how we can use <code>it.type.classifier<\/code> to figure out the parameter classifier and further customize generation for different collection types.<\/p>\n<p>Explore other properties of <code>it<\/code>, which exposes more details about the <a href=\"https://serpro69.github.io/kotlin-faker/old/kotlindoc/core-api/io/github/serpro69/kfaker/provider/misc/parameterinfo/\">parameter<\/a> that is being customized.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p>There are also two similar methods for map entries: <code>mapEntryKeyTypeGenerator<\/code> and <code>mapEntryValueTypeGenerator<\/code>, which can be used to configure how keys and values are generated in <code>Map<\/code> constructor parameter types:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"CywMDw3Y8l\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"CywMDw3Y8l\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Baz(val map: Map&lt;String, String&gt;)\n\nval baz: Baz = faker.randomClass.randomClassInstance {\n    mapEntryKeyTypeGenerator { randomKey() }\n    mapEntryValueTypeGenerator { randomValue() }\n}\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>Nullable collection element types are also supported (but note that <code>null<\/code>s as values are never returned):<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"4o33tsxuZY\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"4o33tsxuZY\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">data class Nullable(val ints: List&lt;Int?&gt;, val longs: Set&lt;Long?&gt;, val map: Map&lt;Char?, String?&gt;)\n\nval nullable = faker.randomClass.randomClassInstance&lt;Nullable&gt; {\n    collectionsSize = 10\n    collectionElementTypeGenerator&lt;Int?&gt; { if (faker.random.nextBoolean()) null else 42 }\n    collectionElementTypeGenerator&lt;Long?&gt; { if (!faker.random.nextBoolean()) 0L else null }\n    mapEntryKeyTypeGenerator&lt;Char&gt; {\n        faker.random.randomValue(\n            listOf(\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f'\n            )\n        )\n    }\n    mapEntryValueTypeGenerator&lt;String?&gt; { if (faker.random.nextBoolean()) null else &quot;foo&quot; }\n}\nnullable.ints shouldContain 42\n// we allow nullable values, but `null` as a value will never be returned\nnullable.ints shouldNotContain null\n// with above config, if nextBoolean returns false, we say &quot;return null&quot;,\n// but since nulls are never returned as value, all nulls will be returned as random instance,\n// hence we won't have all 42's\nnullable.ints shouldNot containOnly(42)\n\nnullable.longs shouldContain 0L\nnullable.longs shouldNotContain null\nnullable.longs shouldNot containOnly(0L)\n\nnullable.map.keys shouldNotContain null\nnullable.map.keys shouldContainAnyOf listOf('a', 'b', 'c', 'd', 'e', 'f')\nnullable.map.values shouldNotContain null\nnullable.map.values shouldContain &quot;foo&quot;\nnullable.map.values shouldNot containOnly(&quot;foo&quot;)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<h3 id=\"deterministic-constructor-selection\"><a href=\"#deterministic-constructor-selection\" id=\"deterministic-constructor-selection\" class=\"anchor\"><\/a>Deterministic constructor selection<\/h3>\n<p>By default, the constructor with the least number of args is used when creating a random instance of the class. This might not always be desirable and can be configured. Consider the following example:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"k8M5EamNjl\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"k8M5EamNjl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo\nclass Bar(val int: Int)\nclass Baz(val foo: Foo, val string: String)\nclass FooBarBaz {\n    var foo: Foo? = null\n        private set\n    var bar: Bar? = null\n        private set\n    var baz: Baz? = null\n        private set\n\n    constructor(foo: Foo) {\n        this.foo = foo\n    }\n\n    constructor(foo: Foo, bar: Bar) : this(foo) {\n        this.bar = bar\n    }\n\n    constructor(foo: Foo, bar: Bar, baz: Baz) : this(foo, bar) {\n        this.baz = baz\n    }\n}\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br>\nIf there is a need to use the constructor with 3 arguments when creating an instance of <code>FooBarBaz<\/code>, we can do it like so:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"WddMZsVs68\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"WddMZsVs68\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val fooBarBaz: FooBarBaz = faker.randomClass.randomClassInstance {\n    constructorParamSize = 3\n    fallbackStrategy = FallbackStrategy.USE_MAX_NUM_OF_ARGS\n}\nassertNotEquals(fooBarBaz.foo, null)\nassertNotEquals(fooBarBaz.bar, null)\nassertNotEquals(fooBarBaz.baz, null)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br>\nIn the above example, <code>FooBarBaz<\/code> will be instantiated with the first discovered constructor that has <code>parameters.size == 3<\/code>; if there are multiple constructors that satisfy this condition - a random one will be used. Failing that (for example, if there is no such constructor), a constructor with the maximum number of arguments will be used to create an instance of the class.<\/p>\n<p>Alternatively to <code>constructorParamSize<\/code>, a <code>constructorFilterStrategy<\/code> config property can be used as well:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"gcx0IwNUy9\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"gcx0IwNUy9\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val fooBarBaz: FooBarBaz = faker.randomClass.randomClassInstance {\n    constructorFilterStrategy = ConstructorFilterStrategy.MAX_NUM_OF_ARGS\n}\nassertNotEquals(fooBarBaz.foo, null)\nassertNotEquals(fooBarBaz.bar, null)\nassertNotEquals(fooBarBaz.baz, null)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>The above has the following rules:<\/p>\n<ul>\n<li><code>constructorParamSize<\/code> config property takes precedence over <code>constructorFilterStrategy<\/code><\/li>\n<li>both can be specified at the same time, though in most cases it probably makes more sense to use <code>fallbackStrategy<\/code> with <code>constructorParamSize<\/code> as it just makes things a bit more readable<\/li>\n<li>configuration properties that are set in <code>randomClassInstance<\/code> block will be applied to all &quot;children&quot; classes. For example classes <code>Foo<\/code>, <code>Bar<\/code>, and <code>Baz<\/code> will use the same random instance configuration settings when instances of those classes are created in <code>FooBarBaz<\/code> class.<\/li>\n<\/ul>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"default-values-selection\"><a href=\"#default-values-selection\" id=\"default-values-selection\" class=\"anchor\"><\/a>Default values selection<\/h3>\n<p>By default, all parameters of a <a href=\"#deterministic-constructor-selection\">selected constructor<\/a> would be generated with randomized values:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"Z4MZMYI7gm\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"Z4MZMYI7gm\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo(val i: Int)\nclass TestClass(\n    val iMin: Int = Int.MIN_VALUE,\n    val iMax: Int = Int.MAX_VALUE,\n    val s: String = &quot;sometimes a string... is just a string&quot;,\n    val foo: Foo = Foo(369)\n)\n\nval testClass: TestClass = Faker().randomClass.randomClassInstance()\nassertNotEquals(Int.MIN_VALUE, testClass.iMin)\nassertNotEquals(Int.MAX_VALUE, testClass.iMax)\nassertNotEquals(&quot;sometimes a string... is just a string&quot;, testClass.s)\nassertNotEquals(369, testClass.foo.i)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>This behavior can be changed with <code>defaultValuesStrategy<\/code> configuration option.<\/p>\n<p>One can choose between generating values only for non-optional constructor parameters:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"SNW33F9vao\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"SNW33F9vao\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val testClass: TestClass = Faker().randomClass.randomClassInstance {\n    defaultValuesStrategy = USE_DEFAULTS\n}\nassertEquals(Int.MIN_VALUE, testClass.iMin)\nassertEquals(Int.MAX_VALUE, testClass.iMax)\nassertEquals(&quot;sometimes a string... is just a string&quot;, testClass.s)\nassertEquals(369, testClass.foo.i)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>...or randomly selecting between a default value and a randomly-generated one:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"aFD1o1Kj0W\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"aFD1o1Kj0W\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">it(&quot;should randomly pick a default or a random value&quot;) {\n    val testClass: TestClass = Faker().randomClass.randomClassInstance {\n        defaultValuesStrategy = PICK_RANDOMLY\n    }\n    assert(\n        testClass.iMin == Int.MIN_VALUE\n            || testClass.iMax == Int.MAX_VALUE\n            || testClass.s == &quot;sometimes a string... is just a string&quot;\n            || testClass.foo.i == 369\n    )\n    assert(!(\n        testClass.iMin == Int.MIN_VALUE\n            &amp;&amp; testClass.iMax == Int.MAX_VALUE\n            &amp;&amp; testClass.s == &quot;sometimes a string... is just a string&quot;\n            &amp;&amp; testClass.foo.i == 369\n    ))\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"configuring-the-size-of-generated-collections\"><a href=\"#configuring-the-size-of-generated-collections\" id=\"configuring-the-size-of-generated-collections\" class=\"anchor\"><\/a>Configuring the size of generated Collections<\/h3>\n<p>Support for <code>kotlin.collections.Collection<\/code> parameter types - <code>List<\/code>, <code>Set<\/code> and <code>Map<\/code> has been added in version <code>1.9.0<\/code> and with that - a new configuration parameter to configure the size of the generated collection.<\/p>\n<p>By default, all collections will be generated with only 1 element:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"ZeN8hU8rLW\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ZeN8hU8rLW\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo(\n    val list: List&lt;String&gt;,\n    val set: Set&lt;String&gt;,\n    val map: Map&lt;String, Int&gt;\n)\n\nval foo = faker.randomClass.randomClassInstance&lt;Foo&gt;()\n\nassertEquals(foo.list.size, 1)\nassertEquals(foo.set.size, 1)\nassertEquals(foo.map.size, 1)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>This can be configured using <code>collectionsSize<\/code> parameter:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"ATLZHEMnVu\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ATLZHEMnVu\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo(\n    val list: List&lt;String&gt;,\n    val set: Set&lt;String&gt;,\n    val map: Map&lt;String, Int&gt;\n)\n\nval foo = faker.randomClass.randomClassInstance&lt;Foo&gt; {\n    collectionsSize = 6\n}\n\nassertEquals(foo.list.size, 6)\nassertEquals(foo.set.size, 6)\nassertEquals(foo.map.size, 6)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>Note that the <code>collectionsSize<\/code> configuration parameter affects all 3 types of Collections.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p><br><\/p>\n<div class=\"box has-background-warning\">\n  <div class=\"warn\">\n    <div class=\"warn-heading\">\n      <h5><span class=\"warn-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\"><\/path>\n        <\/svg>\n      <\/span>warn<\/h5>\n    <\/div>\n    <div class=\"warn-content\">\n      <p><p>It is also worth noting that <code>typeGenerator&lt;Foo&gt; { ... }<\/code> configuration, which was covered above, will not affect <code>Foo<\/code> typed elements in a generated collection.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p>Consider the following example. If <code>typeGenerator&lt;String&gt; { &quot;a string&quot; }<\/code> would affect <code>String<\/code> typed elements of <code>Set<\/code>, the resulting generated set would be of size <code>1<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"oufHD39eyv\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"oufHD39eyv\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class TestClass(\n    val string: String,\n    val set: Set&lt;String&gt;\n)\n\nval testClass = faker.randomClass.randomClassInstance&lt;TestClass&gt; {\n    typeGenerator { &quot;a string&quot; }\n    collectionsSize = 10\n}\n\nassertEquals(testClass.string, &quot;a string&quot;)\nassertEquals(testClass.set.size, 10)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>At the same time, <code>typeGenerator<\/code> configurator itself can be used with collections as well:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"48OvkzZs1G\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"48OvkzZs1G\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">class Foo\nclass Bar(\n    val list: List&lt;Foo&gt;,\n    val set: Set&lt;String&gt;,\n    val map: Map&lt;String, Int&gt;\n)\n\nval bar = faker.randomClass.randomClassInstance&lt;Bar&gt; {\n    typeGenerator { emptyList&lt;Foo&gt;() }\n    typeGenerator { setOf(&quot;one&quot;, &quot;two&quot;, &quot;fortytwo&quot;) }\n    typeGenerator { mapOf(&quot;pwd&quot; to 12177) }\n}\nassertEquals(bar.list, emptyList&lt;Foo&gt;())\nassertEquals(bar.set, setOf(&quot;one&quot;, &quot;two&quot;, &quot;fortytwo&quot;))\nassertEquals(bar.map, mapOf(&quot;pwd&quot; to 12177))\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"making-a-new-instance-of-random-class-provider\"><a href=\"#making-a-new-instance-of-random-class-provider\" id=\"making-a-new-instance-of-random-class-provider\" class=\"anchor\"><\/a>Making a new instance of Random Class Provider<\/h3>\n<p><code>RandomClassProvider<\/code> has two functions: <code>new<\/code> and <code>copy<\/code>, that allow you to create another instance of the class, for example, a one that has a different type generation configuration.<\/p>\n<h4 id=\"new-instance\"><a href=\"#new-instance\" id=\"new-instance\" class=\"anchor\"><\/a>New Instance<\/h4>\n<p>To make a new instance of <code>randomProvider<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"uynTSYqZVl\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"uynTSYqZVl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val cfg = fakerConfig {\n    randomClassInstance { // ❶\n        typeGenerator&lt;Bar&gt; { Bar(1, UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;)) }\n    }\n}\nval f = Faker(cfg)\nf.randomClass.configure { // ❷\n    typeGenerator&lt;Bar&gt; { Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)) }\n}\nval new = f.randomClass.new() // ❸\nval baz: Baz = f.randomClass.randomClassInstance&lt;Baz&gt;()\nval newBaz: Baz = new.randomClassInstance&lt;Baz&gt;()\nassertEquals(Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)), baz.bar)\nassertEquals(Bar(1, UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;)), newBaz.bar)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>Any configuration set via <code>fakerConfig<\/code> ( ❶ ), will be applied to the <code>new<\/code> instance ( ❸ ) as well.\nAny configuration set via <code>faker.randomProvider<\/code> instance ( ❷ ) is NOT applied to the <code>new<\/code> instance.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p><br><\/p>\n<h4 id=\"instance-copy\"><a href=\"#instance-copy\" id=\"instance-copy\" class=\"anchor\"><\/a>Instance Copy<\/h4>\n<p>To make a copy of an existing instance of <code>randomProvider<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"3DYlUh7kub\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"3DYlUh7kub\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val cfg = fakerConfig { // ❶\n    randomClassInstance {\n        typeGenerator&lt;Bar&gt; { Bar(1, UUID.fromString(&quot;00000000-0000-0000-0000-000000000000&quot;)) }\n    }\n}\nval f = Faker(cfg)\nf.randomClass.configure { // ❷\n    typeGenerator&lt;Bar&gt; { Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)) }\n}\nval copy = f.randomClass.copy() // ❸\nval baz: Baz = f.randomClass.randomClassInstance&lt;Baz&gt;()\nval bazCopy: Baz = copy.randomClassInstance&lt;Baz&gt;()\nassertEquals(Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)), baz.bar)\nassertEquals(Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)), bazCopy.bar)\n\ncopy.configure { // ❹\n    typeGenerator&lt;Bar&gt; { Bar(0, UUID.fromString(&quot;22222222-2222-2222-2222-222222222222&quot;)) }\n}\nval originalBaz: Baz = f.randomClass.randomClassInstance&lt;Baz&gt;()\nval reconfiguredBazCopy = copy.randomClassInstance&lt;Baz&gt;()\nassertEquals(Bar(42, UUID.fromString(&quot;11111111-1111-1111-1111-111111111111&quot;)), originalBaz.bar)\nassertEquals(Bar(0, UUID.fromString(&quot;22222222-2222-2222-2222-222222222222&quot;)), reconfiguredBazCopy.bar)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>Any configuration that was already applied to <code>faker.randomProvider<\/code> ( ❶ and ❷ ), will be applied to the <code>copy<\/code> ( ❸ ) as well.<\/p>\n<p>The <code>copy<\/code>, just as <code>new<\/code> instance, can of course be reconfigured ( ❹ ) as needed, which does not affect the configuration of the <code>faker.randomProvider<\/code> or configurations of other &quot;copies&quot;.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"dealing-with-generic-types\"><a href=\"#dealing-with-generic-types\" id=\"dealing-with-generic-types\" class=\"anchor\"><\/a>Dealing with Generic Types<\/h3>\n<p>Generic parameter types are not fully supported at this moment due to type-erasure on the JVM (See also https://github.com/serpro69/kotlin-faker/issues/191)<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h3 id=\"top-level-functions\"><a href=\"#top-level-functions\" id=\"top-level-functions\" class=\"anchor\"><\/a>Top-level functions<\/h3>\n<p>Sometimes you just want to generate random POJO instances and don't need the whole range of kotlin-faker functionality?\nFor these cases you can import <code>randomClassInstance<\/code> top-level function and use it directly w/o the need to instantiate an instance of <code>Faker<\/code><\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"XyaKwAjye0\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"XyaKwAjye0\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">import io.github.serpro69.kfaker.randomClassInstance\n\nval randomClass = randomClassInstance&lt;MyClass&gt;()\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>It can also be configured via <code>configurator<\/code> lambda parameter, or via <code>FakerConfig<\/code> instance:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"8vzmBnWUEv\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"8vzmBnWUEv\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">import io.github.serpro69.kfaker.fakerConfig\nimport io.github.serpro69.kfaker.randomClassInstance\nimport java.time.Instant\n\nval randomClass = randomClassInstance&lt;MyClass&gt;() {\n  typeGenerator&lt;Instant&gt; { Instant.now() }\n}\n\nval cfg = fakerConfig {\n  randomClassInstance {\n    typeGenerator&lt;Instant&gt; { Instant.MIN }\n  }\n}\nval another = randomClassInstance&lt;MyClass&gt;(cfg)\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"random-everything\"><a href=\"#random-everything\" id=\"random-everything\" class=\"anchor\"><\/a>Random Everything<\/h2>\n<p>Faker provides its wrapper functions around <code>java.util.Random<\/code> (with some additional functionality that is not covered by <code>java.util.Random<\/code>) through <code>Faker().random<\/code> property.<\/p>\n<h3 id=\"wrappers-around-javautilrandom\"><a href=\"#wrappers-around-javautilrandom\" id=\"wrappers-around-javautilrandom\" class=\"anchor\"><\/a>Wrappers around <code>java.util.Random<\/code><\/h3>\n<div class=\"tabs\">\n  <ul data-tabs=\"bTBoUC4XOI\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"bTBoUC4XOI\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.random.nextBoolean()\nfaker.random.nextChar()\nfaker.random.nextDouble()\nfaker.random.nextFloat()\nfaker.random.nextInt()\nfaker.random.nextInt(bound = 100)\nfaker.random.nextInt(min = 100, max = 999)\nfaker.random.nextInt(intRange = (0..99))\nfaker.random.nextLetter(upper = false)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"random-enum-instance\"><a href=\"#random-enum-instance\" id=\"random-enum-instance\" class=\"anchor\"><\/a>Random Enum Instance<\/h3>\n<div class=\"tabs\">\n  <ul data-tabs=\"iF4yz9jhim\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"iF4yz9jhim\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">enum class Foo {\n    ONE,\n    TWO,\n    FORTY_TWO\n}\n\n\nfaker.random.nextEnum&lt;Foo&gt;()\nfaker.random.nextEnum(enum = Foo::class.java)\nfaker.random.nextEnum(values = Foo.values())\nfaker.random.nextEnum(enum = Foo::class.java) { it != Foo.ONE }\nfaker.random.nextEnum&lt;Foo&gt;(&quot;ONE&quot;)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"random-strings\"><a href=\"#random-strings\" id=\"random-strings\" class=\"anchor\"><\/a>Random Strings<\/h3>\n<div class=\"tabs\">\n  <ul data-tabs=\"VIWJT6qoHk\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"VIWJT6qoHk\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.random.randomString(\n    length = 42,\n    numericalChars = false\n)\n\n\nfaker.random.randomString(\n    length = 24,\n    locale = Locale.forLanguageTag(&quot;nb-NO&quot;),\n    indexChars = true,\n    auxiliaryChars = true,\n    punctuationChars = true,\n    numericalChars = true,\n)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"random-sub-lists-and-sub-sets\"><a href=\"#random-sub-lists-and-sub-sets\" id=\"random-sub-lists-and-sub-sets\" class=\"anchor\"><\/a>Random sub-lists and sub-sets<\/h3>\n<div class=\"tabs\">\n  <ul data-tabs=\"bbOurjFrRD\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"bbOurjFrRD\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val list = List(100) { it }\nfaker.random.randomSublist(list, size = 10, shuffled = true)\nfaker.random.randomSublist(list, sizeRange = 6..42, shuffled = true)\n\n\nval set = setOf(*List(100) { it }.toTypedArray())\nfaker.random.randomSubset(set, size = 10, shuffled = true)\nfaker.random.randomSubset(set, sizeRange = 66..99, shuffled = true)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"random-element-from-a-listarray\"><a href=\"#random-element-from-a-listarray\" id=\"random-element-from-a-listarray\" class=\"anchor\"><\/a>Random element from a list/array<\/h3>\n<div class=\"tabs\">\n  <ul data-tabs=\"rpjR3Ua9TS\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"rpjR3Ua9TS\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val list = listOf(1, 2, 3)\nfaker.random.randomValue(list)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"random-uuid\"><a href=\"#random-uuid\" id=\"random-uuid\" class=\"anchor\"><\/a>Random UUID<\/h3>\n<div class=\"tabs\">\n  <ul data-tabs=\"an5sMTECSh\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"an5sMTECSh\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.random.nextUUID()\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<h3 id=\"unique-random-values\"><a href=\"#unique-random-values\" id=\"unique-random-values\" class=\"anchor\"><\/a>Unique Random Values<\/h3>\n<p>Just like most data providers, <code>Faker#random<\/code> supports generation of unique values. See <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator\">Generator of Unique Values<\/a> page for usage details.<\/p>\n<p>Both &quot;local&quot; (provider level) and &quot;global&quot; (faker level) generation of unique values are supported for <code>RandomProvider<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"tqzkhoPIik\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"tqzkhoPIik\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val ints = List(21) {\n    faker.random.unique.nextInt(42)\n}\nassert(ints.distinct().size == 21)\n// cleanup of unique values via enum key for nextInt function\nfaker.random.unique.clear(RandomProvider.Key.NEXT_INT)\n\n<\/code><\/pre>\n<pre><code class=\"language-kotlin\">faker.unique.configuration { enable(faker::random) }\nval uniqueInts = List(21) {\n    faker.random.nextInt(42)\n}\nassert(uniqueInts.distinct().size == 21)\n// cleanup global unique values for Random provider\nfaker.unique.clear(faker::random)\n// disable global unique values for Random provider\nfaker.unique.configuration { disable(faker::random) }\nval ints = List(21) {\n    faker.random.nextInt(42)\n}\nassert(ints.distinct().size &lt; 21)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"random-strings-from-templates\"><a href=\"#random-strings-from-templates\" id=\"random-strings-from-templates\" class=\"anchor\"><\/a>Random Strings from Templates<\/h2>\n<p>Faker's <code>StringProvider<\/code> allows for replacing certain user-defined parts of strings with randomly generated chars (letters and digits), as well as generating strings from regex expressions.\nThe following functions are available withing the <code>Faker().string<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"PuEtMa3mwe\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"PuEtMa3mwe\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.string.numerify(&quot;123###&quot;).all { it.isDigit() } shouldBe true\nfaker.string.letterify(&quot;foo???&quot;).all { it.isLetter() } shouldBe true\nfaker.string.letterify(&quot;???BAR&quot;, true).all { it.isUpperCase() } shouldBe true\nfaker.string.letterify(&quot;???bar&quot;, false).all { it.isLowerCase() } shouldBe true\nfaker.string.bothify(&quot;foo???bar###&quot;)\nfaker.string.regexify(&quot;&quot;&quot;\\d{42}&quot;&quot;&quot;).all { it.isDigit() } shouldBe true\nfaker.string.regexify(&quot;&quot;&quot;\\d{42}&quot;&quot;&quot;).length shouldBe 42\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "java-interop": {
        "ownKey": "java-interop",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "java-interop",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/java-interop"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-cli",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "available-locales",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/available-locales"
          },
          "description": "",
          "title": "Java Interop",
          "content": "<h1 id=\"java-interop\"><a href=\"#java-interop\" id=\"java-interop\" class=\"anchor\"><\/a>Java Interop<\/h1>\n<h1 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h1>\n<ul>\n<li><a href=\"#using-faker-dsl\">Using Faker DSL<\/a><\/li>\n<li><a href=\"#calling-faker-methods\">Calling <code>Faker<\/code> methods<\/a><\/li>\n<\/ul>\n<h2 id=\"using-faker-dsl\"><a href=\"#using-faker-dsl\" id=\"using-faker-dsl\" class=\"anchor\"><\/a>Using Faker DSL<\/h2>\n<p>Even though <strong>kotlin-faker<\/strong> was created with Kotlin in mind, it is still possible to use this library from a Java-based project thanks to great\nKotlin-to-Java interop.<\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>There are similar \"faker\" libraries written in Java for Java, so you might consider those as well. Check out the <a href=\"https://serpro69.github.io/kotlin-faker/old/faker-comparisons\">JVM-targeted Faker Libs Comparison<\/a> for some comparison details with other faker libs if you're interested.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p>Kotlin faker comes with a DSL-like functions (see also <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-dsl\">Faker DSL<\/a>), and while this works great with Kotlin with its type inferences and implicit returns from lambdas, &quot;functional Kotlin-to-Java&quot; interoperability is far from nice.<\/p>\n<p>To somehow mitigate these limitations, kotlin faker comes with a <code>FunctionalUtils<\/code> java class that has a static <code>fromConsumer<\/code> method which takes a function and returns the last statement, thus avoiding the need to specify the <code>return<\/code> explicitly.<\/p>\n<p>Consider the following example of creating and configuring a <code>Faker<\/code> instance with the DSL:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"1U3zedTN2w\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"1U3zedTN2w\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">Faker faker = faker(fromConsumer(f -&gt; {\n    f.config(fromConsumer(config -&gt; {\n        config.setRandomSeed(42L);\n    }));\n}));\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>This of course doesn't look as good as Kotlin, but that's Java for you with its ugly lambdas.<\/p>\n<p>However, if <code>builder<\/code> parameters are not called with the help of <code>fromConsumer<\/code> method, then explicit returns should be specified:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"Cn8mZkr7G7\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"Cn8mZkr7G7\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">Faker faker = faker(f -&gt; {\n    f.config(config -&gt; {\n        config.setRandomSeed(42L);\n        return Unit.INSTANCE;\n    });\n    return Unit.INSTANCE;\n});\n<\/code><\/pre><\/div>\n\n<\/div>\n<p>Fewer parentheses, but an explicit <code>return<\/code> statement for each lambda - the choice, as they say, is yours.<\/p>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/java-interop#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"calling-faker-methods\"><a href=\"#calling-faker-methods\" id=\"calling-faker-methods\" class=\"anchor\"><\/a>Calling <code>Faker<\/code> methods<\/h2>\n<p>Calling a faker method is pretty straightforward. The only difference between kotlin and java here is that in java you need to call the getter of the fake data provider properties such as <code>name<\/code>, <code>address<\/code>, and so on.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"jyPgW0ZUhw\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          Java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          Kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"jyPgW0ZUhw\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">faker.getName().firstName()\nfaker.getAddress().city()\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">faker.name.firstName()\nfaker.address.city()\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/java-interop#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      },
      "faker-dsl": {
        "ownKey": "faker-dsl",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-dsl",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-dsl"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "data-providers",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/data-providers"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "extras",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/extras"
          },
          "description": "",
          "title": "Faker DSL",
          "content": "<h1 id=\"faker-dsl\"><a href=\"#faker-dsl\" id=\"faker-dsl\" class=\"anchor\"><\/a>Faker DSL<\/h1>\n<p>Faker comes with a DSL to create <code>Faker<\/code> and <code>FakerConfig<\/code> instances.<\/p>\n<p>If you're using kotlin - chances are, you will want to use a DSL for creating and configuring <code>Faker<\/code> instances. An exception to this could be if you want to postpone creating the <code>FakerConfig<\/code> instance to a later point, in which case check out the &quot;Non-DSL&quot; way of configuring <code>Faker<\/code>s.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"KU8sWz7mua\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        Faker DSL\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        Config Builder\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        Non-DSL\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"KU8sWz7mua\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><p>❶ Use the <code>faker<\/code> dsl function to create an instance of <code>Faker<\/code>.<\/p>\n<p>❷ Inside the <code>faker<\/code> dsl function use <code>fakerConfig<\/code> function to configure this instance of <code>Faker<\/code>.<\/p>\n<pre><code class=\"language-kotlin\">val faker = faker { // ❶\n    fakerConfig { // ❷\n        locale = &quot;nl&quot;\n        random = Random(42)\n        uniqueGeneratorRetryLimit = 111\n    }\n}\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><p>❶ Alternatively create <code>FakerConfig<\/code> instance with the top-level <code>fakerConfig<\/code> function.<\/p>\n<p>❷ Create the <code>Faker<\/code> instance with custom configuration.<\/p>\n<pre><code class=\"language-kotlin\">val config = fakerConfig { // ❶\n    locale = &quot;nl&quot;\n    uniqueGeneratorRetryLimit = 111\n    random = if (theAnswerToTheUltimateQuestion) Random(42) else Random()\n}\n\nval faker = Faker(config) // ❷\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><p>❶ Create <code>FakerConfig.Builder<\/code> instance and postpone instantiation of <code>FakerConfig<\/code>.<\/p>\n<p>❷ Add extra configuration later on.<\/p>\n<p>❸ Build the <code>FakerConfig<\/code> when ready.<\/p>\n<p>❹ Create the <code>Faker<\/code> instance with custom configuration<\/p>\n<pre><code class=\"language-kotlin\">val configBuilder = FakerConfig.Builder() // ❶\n    .setLocale(&quot;nl&quot;)\n    .setUniqueGeneratorRetryLimit(111)\n\nconfigBuilder.setRandomSeed(42) // ❷\n\nval config: FakerConfig = configBuilder.build() // ❸\n\nval faker = Faker(config) // ❹\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr />\n<div class=\"box has-background-success\">\n  <div class=\"tip\">\n    <div class=\"tip-heading\">\n      <h5><span class=\"tip-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"16\" viewBox=\"0 0 12 16\">\n          <path fill-rule=\"evenodd\" d=\"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"><\/path>\n        <\/svg>\n      <\/span>tip<\/h5>\n    <\/div>\n    <div class=\"tip-content has-text-white-ter\">\n      <p><p class=\"description-text\">\nIf you're interested in using the DSL from Java, check out the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/java-interop#using-faker-dsl\">Java Interop - Using Faker DSL<\/a> for more details, else go to the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration\">Faker Configuration<\/a> page that also describes how to configure <code>Faker<\/code> in a more \"traditional-java-way\".\n<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n"
        }]
      },
      "data-providers": {
        "ownKey": "data-providers",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "data-providers",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/data-providers"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "custom-data-provider",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/custom-data-provider"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-dsl",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-dsl"
          },
          "description": "",
          "title": "Data Providers",
          "content": "<h1 id=\"data-providers\"><a href=\"#data-providers\" id=\"data-providers\" class=\"anchor\"><\/a>Data Providers<\/h1>\n<p>Below is the list of available Fakers domains and their data providers (data generators) that correspond to the yaml dictionary files found in <a href=\"https://github.com/serpro69/kotlin-faker/tree/master/core/src/main/resources/locales/en\">core/locales/en<\/a><\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>Not all (although most) of the providers and/or their functions are implemented at this point. For more details on available functions see the documentation for each provider below, or go to the Core API page to browse the API reference documentation.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<div class=\"box has-background-warning\">\n  <div class=\"warn\">\n    <div class=\"warn-heading\">\n      <h5><span class=\"warn-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\"><\/path>\n        <\/svg>\n      <\/span>warn<\/h5>\n    <\/div>\n    <div class=\"warn-content\">\n      <p>Below pages contain code blocks with inlined yaml dictionaries, some of them can be quite big. This could affect your internet traffic if you're viewing these docs on a mobile device.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p>&quot;Core&quot; <code>Faker<\/code><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/address\">Address<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/color\">Color<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/crypto\">Crypto<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/currency\">Currency<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/currency_symbol\">Currency Symbol<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/file\">File<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/gender\">Gender<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/id_number\">Id Number<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/internet\">Internet<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/measurement\">Measurement<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/money\">Money<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/name\">Name<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/person\">Person<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/phone_number\">Phone Number<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/random\">Random<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/random_class\">Random Class<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/separator\">Separator<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/source\">Source<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/core/string_provider\">String Provider<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/books\"><code>BooksFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/bible\">Bible<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/book\">Book<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/cosmere\">Cosmere<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/culture_series\">Culture Series<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/dc_comics\">Dc Comics<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/dune\">Dune<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/lovecraft\">Lovecraft<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/shakespeare\">Shakespeare<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/the_kingkiller_chronicle\">The Kingkiller Chronicle<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/books/tolkien\">Tolkien<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/commerce\"><code>CommerceFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/bank\">Bank<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/barcode\">Barcode<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/beer\">Beer<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/business\">Business<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/cannabis\">Cannabis<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/code\">Code<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/coffee\">Coffee<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/commerce\">Commerce<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/company\">Company<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/construction\">Construction<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/dessert\">Dessert<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/finance\">Finance<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/food\">Food<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/house\">House<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/industry_segments\">Industry Segments<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/invoice\">Invoice<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/marketing\">Marketing<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/restaurant\">Restaurant<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/stripe\">Stripe<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/subscription\">Subscription<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/commerce/tea\">Tea<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/creatures\"><code>CreaturesFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/creatures/ancient\">Ancient<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/creatures/animal\">Animal<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/creatures/bird\">Bird<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/creatures/cat\">Cat<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/creatures/dog\">Dog<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/creatures/horse\">Horse<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/databases\"><code>DatabasesFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/databases/database\">Database<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/databases/mariadb\">Mariadb<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/databases/mssqlserver\">Mssqlserver<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/databases/mysql\">Mysql<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/databases/oracledb\">Oracledb<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/databases/postgresql\">Postgresql<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/edu\"><code>EduFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/edu/educator\">Educator<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/edu/job\">Job<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/edu/science\">Science<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/edu/university\">University<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/games\"><code>GamesFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/clash_of_clans\">Clash Of Clans<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/coin\">Coin<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/control\">Control<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/dnd\">Dnd<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/dota\">Dota<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/elder_scrolls\">Elder Scrolls<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/fallout\">Fallout<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/final_fantasy_xiv\">Final Fantasy Xiv<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/game\">Game<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/half_life\">Half Life<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/heroes\">Heroes<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/heroes_of_the_storm\">Heroes Of The Storm<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/league_of_legends\">League Of Legends<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/minecraft\">Minecraft<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/myst\">Myst<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/overwatch\">Overwatch<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/pokemon\">Pokemon<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/sonic_the_hedgehog\">Sonic The Hedgehog<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/street_fighter\">Street Fighter<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/super_mario\">Super Mario<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/super_smash_bros\">Super Smash Bros<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/superhero\">Superhero<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/tarkov\">Tarkov<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/touhou\">Touhou<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/warhammer_fantasy\">Warhammer Fantasy<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/witcher\">Witcher<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/world_of_warcraft\">World Of Warcraft<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/games/zelda\">Zelda<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/humor\"><code>HumorFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/humor/chiquito\">Chiquito<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/humor/chuck_norris\">Chuck Norris<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/humor/funny_name\">Funny Name<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/humor/jack_handey\">Jack Handey<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/humor/mitch_hedberg\">Mitch Hedberg<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/japmedia\"><code>JapaneseMediaFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/conan\">Conan<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/cowbow_bebop\">Cowbow Bebop<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/doraemon\">Doraemon<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/dragon_ball\">Dragon Ball<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/fma_brotherhood\">Fma Brotherhood<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/kamen_rider\">Kamen Rider<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/naruto\">Naruto<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/one_piece\">One Piece<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/studio_ghibli\">Studio Ghibli<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/japmedia/sword_art_online\">Sword Art Online<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/lorem\"><code>LoremFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/adjective\">Adjective<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/emotion\">Emotion<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/hipster\">Hipster<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/lorem\">Lorem<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/markdown\">Markdown<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/nato_phonetic_alphabet\">Nato Phonetic Alphabet<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/quote\">Quote<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/slack_emoji\">Slack Emoji<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/lorem/verbs\">Verbs<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/misc\"><code>MiscFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/artist\">Artist<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/blood\">Blood<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/demographic\">Demographic<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/driving_license\">Driving License<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/greek_philosophers\">Greek Philosophers<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/hobby\">Hobby<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/military\">Military<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/misc/relationship\">Relationship<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/movies\"><code>MoviesFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/avatar\">Avatar<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/back_to_the_future\">Back To The Future<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/departed\">Departed<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/dumb_and_dumber\">Dumb And Dumber<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/ghost_busters\">Ghost Busters<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/hackers\">Hackers<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/harry_potter\">Harry Potter<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/hitchhikers_guide_to_the_galaxy\">Hitchhikers Guide To The Galaxy<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/hobbit\">Hobbit<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/how_to_train_your_dragon\">How To Train Your Dragon<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/lebowski\">Lebowski<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/lord_of_the_rings\">Lord Of The Rings<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/movie\">Movie<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/princess_bride\">Princess Bride<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/rajnikanth\">Rajnikanth<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/star_wars\">Star Wars<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/the_room\">The Room<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/tron\">Tron<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/v_for_vendetta\">V For Vendetta<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/movies/yoda\">Yoda<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/music\"><code>MusicFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/bossa_nova\">Bossa Nova<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/grateful_dead\">Grateful Dead<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/kpop\">Kpop<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/music\">Music<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/opera\">Opera<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/pearl_jam\">Pearl Jam<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/phish\">Phish<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/prince\">Prince<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/rock_band\">Rock Band<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/rush\">Rush<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/show\">Show<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/smashing_pumpkins\">Smashing Pumpkins<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/music/umphreys_mcgee\">Umphreys Mcgee<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/sports\"><code>SportsFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/basketball\">Basketball<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/chess\">Chess<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/crossfit\">Crossfit<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/esport\">Esport<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/football\">Football<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/mountaineering\">Mountaineering<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/sport\">Sport<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/team\">Team<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/volleyball\">Volleyball<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/sports/world_cup\">World Cup<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/tech\"><code>TechFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/app\">App<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/appliance\">Appliance<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/camera\">Camera<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/computer\">Computer<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/crypto_coin\">Crypto Coin<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/device\">Device<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/drone\">Drone<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/electrical_components\">Electrical Components<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/hacker\">Hacker<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/programming_language\">Programming Language<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/space\">Space<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tech/vehicle\">Vehicle<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/travel\"><code>TravelFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/travel/airport\">Airport<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/travel/australia\">Australia<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/travel/compass\">Compass<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/travel/mountain\">Mountain<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/travel/nation\">Nation<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/travel/train_station\">Train Station<\/a><\/p>\n<\/li>\n<\/ul>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/fakers/tvshows\"><code>TvShowsFaker<\/code><\/a><\/p>\n<ul>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/aqua_teen_hunger_force\">Aqua Teen Hunger Force<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/archer\">Archer<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/big_bang_theory\">Big Bang Theory<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/bojack_horseman\">Bojack Horseman<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/breaking_bad\">Breaking Bad<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/brooklyn_nine_nine\">Brooklyn Nine Nine<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/buffy\">Buffy<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/community\">Community<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/dr_who\">Dr Who<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/family_guy\">Family Guy<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/final_space\">Final Space<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/fresh_price_of_bel_air\">Fresh Price Of Bel Air<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/friends\">Friends<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/futurama\">Futurama<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/game_of_thrones\">Game Of Thrones<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/hey_arnold\">Hey Arnold<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/how_i_met_your_mother\">How I Met Your Mother<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/michael_scott\">Michael Scott<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/new_girl\">New Girl<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/parks_and_rec\">Parks And Rec<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/rick_and_morty\">Rick And Morty<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/rupaul\">Rupaul<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/seinfeld\">Seinfeld<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/silicon_valley\">Silicon Valley<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/simpsons\">Simpsons<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/south_park\">South Park<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/spongebob\">Spongebob<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/star_trek\">Star Trek<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/stargate\">Stargate<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/stranger_things\">Stranger Things<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/suits\">Suits<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/supernatural\">Supernatural<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/the_expanse\">The Expanse<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/the_it_crowd\">The It Crowd<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/the_office\">The Office<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/the_thick_of_it\">The Thick Of It<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/twin_peaks\">Twin Peaks<\/a><\/p>\n<\/li>\n<li>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/data-provider/tvshows/venture_bros\">Venture Bros<\/a><\/p>\n<\/li>\n<\/ul>\n"
        }]
      },
      "faker-configuration": {
        "ownKey": "faker-configuration",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-configuration",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "unique-generator",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
            "fileName": "faker-bom",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://serpro69.github.io/kotlin-faker/old/wiki/faker-bom"
          },
          "description": "",
          "title": "Faker Configuration",
          "content": "<h1 id=\"faker-configuration\"><a href=\"#faker-configuration\" id=\"faker-configuration\" class=\"anchor\"><\/a>Faker Configuration<\/h1>\n<h2 id=\"toc\"><a href=\"#toc\" id=\"toc\" class=\"anchor\"><\/a>ToC<\/h2>\n<ul>\n<li><a href=\"#default-configuration\">Default Configuration<\/a><\/li>\n<li><a href=\"#deterministic-random\">Deterministic Random<\/a><\/li>\n<li><a href=\"#locale\">Locale<\/a><\/li>\n<li><a href=\"#random-class-instance\">Random Class Instance<\/a><\/li>\n<\/ul>\n<p><br><\/p>\n<h2 id=\"default-configuration\"><a href=\"#default-configuration\" id=\"default-configuration\" class=\"anchor\"><\/a>Default Configuration<\/h2>\n<p><code>Faker<\/code> can be configured through the <code>FakerConfig<\/code> class, either by passing an instance of <code>FakerConfig<\/code> directly, or<\/p>\n<p>If no <code>FakerConfig<\/code> instance is passed to <code>Faker<\/code> constructor and configuration is not set through the <code>faker<\/code> builder DSL, then default configuration will be used:<\/p>\n<ul>\n<li><code>locale == &quot;en&quot;<\/code><\/li>\n<li><code>random<\/code> is seeded with a pseudo-randomly generated number.<\/li>\n<li><code>uniqueGeneratorRetryLimit<\/code> is set to <code>100<\/code><\/li>\n<\/ul>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"deterministic-random\"><a href=\"#deterministic-random\" id=\"deterministic-random\" class=\"anchor\"><\/a>Deterministic Random<\/h2>\n<p>Faker supports seeding of it's PRNG (pseudo-random number generator) through <code>FakerConfig<\/code> to provide deterministic output of repeated function invocations.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"i0bdqjb7Vh\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"i0bdqjb7Vh\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val config = fakerConfig { random = Random(42) }\nval faker = Faker(config)\nval city1 = faker.address.city()\nval name1 = faker.name.name()\n\nval otherConfig = fakerConfig { random = Random(42) }\nval otherFaker = Faker(otherConfig)\nval city2 = otherFaker.address.city()\nval name2 = otherFaker.name.name()\n\nassertEquals(city1, city2)\nassertEquals(name1, name2)\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">FakerConfig.Builder configBuilder = FakerConfig.builder();\n\nFaker faker = new Faker(configBuilder.withRandom(Random(42)).build());\nString city1 = faker.getAddress().city();\nString name1 = faker.getName().name();\n\nFaker otherFaker = new Faker(configBuilder.withRandom(Random(42)).build());\nString city2 = otherFaker.getAddress().city();\nString name2 = otherFaker.getName().name();\n\nassertEquals(city1, city2);\nassertEquals(name1, name2);\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>Alternatively a <code>randomSeed<\/code> property can be used instead of passing an instance of <code>java.util.Random<\/code>:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"LCIH3jpPsv\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"LCIH3jpPsv\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val config = fakerConfig { randomSeed = 42 }\nval faker = Faker(config)\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">FakerConfig config = FakerConfig.builder()\n    .withRandomSeed(42)\n    .build();\nFaker faker = new Faker(config);\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr />\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p><code>randomSeed<\/code> config property has precedence over <code>random<\/code> property, and the latter will be ignored if <code>randomSeed<\/code> is specified.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<div class=\"tabs\">\n  <ul data-tabs=\"MYPqmqjZXt\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"MYPqmqjZXt\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val config = fakerConfig {\n    random = Random(123)\n    randomSeed = 42\n}\nval faker = Faker(config)\nval city1 = faker.address.city()\n\nval otherConfig = fakerConfig {\n    random = Random(123)\n    randomSeed = 42\n}\nval otherFaker = Faker(otherConfig)\nval city2 = otherFaker.address.city()\n\nassertEquals(city1, city2)\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">FakerConfig config = FakerConfig.builder()\n    .withRandom(Random(123))\n    .withRandomSeed(42)\n    .build();\nFaker faker = new Faker(config);\nString city1 = faker.getAddress().city();\n\nFakerConfig otherConfig = FakerConfig.builder()\n    .withRandom(Random(42))\n    .build();\nFaker otherFaker = new Faker(otherConfig);\nString city2 = otherFaker.getAddress().city();\n\nassertEquals(city1, city2);\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"locale\"><a href=\"#locale\" id=\"locale\" class=\"anchor\"><\/a>Locale<\/h2>\n<p>By default <code>Faker<\/code> uses <code>en_US<\/code>-localized dict files to generate data:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"ywbmhFi3qk\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"ywbmhFi3qk\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker()\nassertEquals(faker.address.defaultCountry(), &quot;United States of America&quot;)\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<p>When needed, <code>Faker<\/code> can be configured to use a custom localized dictionary file instead:<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"fEGw0FHQ2E\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n    <li >\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-java\"><\/span>\n          java\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"fEGw0FHQ2E\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val config = fakerConfig { locale = &quot;nb-NO&quot; }\nval faker = Faker(config)\nassertEquals(faker.address.defaultCountry(), &quot;Norge&quot;)\n\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-java\">FakerConfig config = FakerConfig.builder()\n    .withLocale(&quot;nb-NO&quot;)\n    .build();\nFaker faker = new Faker(config);\nassertEquals(faker.getAddress().defaultCountry(), &quot;Norge&quot;);\n\n<\/code><\/pre><\/div>\n\n<\/div>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p><p>The <code>locale<\/code> configuration property should be set following the <code>.yml<\/code> dict file name, that is a <code>-<\/code> should be used as a delimiter between &quot;language&quot; and &quot;country&quot; values instead of <code>_<\/code>, i.e. <code>nb-NO<\/code> instead of <code>nb_NO<\/code>.<\/p><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<p><br><\/p>\n<hr />\n<p><br><\/p>\n<p>Using a non-default locale will replace the values in <em>some<\/em> of the providers with the values from localized dictionary.<\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"1KjN4UNNV9\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"1KjN4UNNV9\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val config = fakerConfig { locale = &quot;es&quot; }\nval faker = Faker(config)\nfaker.address.city() // =&gt; Barcelona\n<\/code><\/pre><\/div>\n\n<\/div>\n<p><br><\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>Note that if the localized dictionary file does not contain a category (or a parameter in a category)\nthat is present in the default locale, then non-localized (`en`) value will be generated instead.\n\n<div class=\"tabs\">\n  <ul data-tabs=\"W4N1NFCe6u\">\n  \n    <li class=\"is-active\">\n      <a>\n      \n        <p>\n          <span class=\"iconify-inline\" data-icon=\"vscode-icons:file-type-kotlin\"><\/span>\n          kotlin\n        <\/p>\n      \n      <\/a>\n    <\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"W4N1NFCe6u\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code class=\"language-kotlin\">val faker = Faker() // uses default 'en' locale\nfaker.gameOfThrones.cities() // =&gt; Braavos\n\nval config = fakerConfig {\n    locale = &quot;nb-NO&quot;\n}\nval localizedFaker = Faker(config)\n// 'game_of_thrones' category is not localized for `nb-NO` locale\n// and non-localized value is returned instead\nlocalizedFaker.gameOfThrones.cities() // =&gt; Braavos\n<\/code><\/pre><\/div>\n\n<\/div><\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr />\n<p><br><\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"content is-medium\">\n    <p class=\"description-text\">\n    A list of all locales, and their corresponding dictionary files, can be found on the <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/available-locales\">Available Locales<\/a> page.\n    <\/p>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n<h2 id=\"random-class-instance\"><a href=\"#random-class-instance\" id=\"random-class-instance\" class=\"anchor\"><\/a>Random Class Instance<\/h2>\n<p><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras#random-instance-of-any-class\">RandomClassInstance<\/a> can also be configured both from the <code>FakerConfig<\/code> level.<\/p>\n<div class=\"box has-background-white-ter\">\n  <div class=\"note\">\n    <div class=\"note-heading\">\n    <h5><span class=\"note-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"16\" viewBox=\"0 0 14 16\">\n        <path fill-rule=\"evenodd\" d=\"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"><\/path>\n      <\/svg>\n    <\/span>info<\/h5>\n    <\/div>\n    <div class=\"note-content\">\n      <p>This configuration takes the least precedence and will be overridden by config set on the `faker.randomProvider` level or on the `randomClassInstance` function level.\nSee [Random Class Instance Configuration](https://serpro69.github.io/kotlin-faker/old/wiki/extras#random-class-instance-configuration) for more details.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\n<hr>\n<span class=\"icon-text\">\n  <span class=\"icon\"><i class=\"fas fa-list-ul\"><\/i><\/span>\n  <span>\n    <a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration#toc\">back-to-toc<\/a>\n  <\/span>\n<\/span>\n<p><br><\/p>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://serpro69.github.io/kotlin-faker/old",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://serpro69.github.io/kotlin-faker/old/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": "<html>\n <head><\/head>\n <body>\n  <ul> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/getting-started\">Getting Started<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-bom\">Kotlin-faker BOM<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-configuration\">Faker Configuration<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/unique-generator\">Generator of Unique Values<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extras\">Extras<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-dsl\">Faker DSL<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/data-providers\">Data Providers<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/custom-data-provider\">Custom Data Provider<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/available-locales\">Available Locales<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/java-interop\">Java Interop<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/faker-cli\">Faker Bot CLI<\/a><\/li> \n   <li><a href=\"https://serpro69.github.io/kotlin-faker/old/wiki/extensions\">Extensions<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
    }]
  }}
}